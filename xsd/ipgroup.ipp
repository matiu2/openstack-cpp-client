// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XSDS_IPGROUP_IPP
#define XSDS_IPGROUP_IPP

// Begin prologue.
//
//
// End prologue.

namespace openstack
{
  namespace xml
  {
    // SharedIpGroup_
    // 

    inline
    const SharedIpGroup_::ValueType& SharedIpGroup_::
    value () const
    {
      return this->value_.get ();
    }

    inline
    SharedIpGroup_::ValueType& SharedIpGroup_::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void SharedIpGroup_::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void SharedIpGroup_::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // SharedIpGroups_
    // 

    inline
    const SharedIpGroups_::ValueType& SharedIpGroups_::
    value () const
    {
      return this->value_.get ();
    }

    inline
    SharedIpGroups_::ValueType& SharedIpGroups_::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void SharedIpGroups_::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void SharedIpGroups_::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // SharedIpGroup
    // 

    inline
    const SharedIpGroup::ServerOptional& SharedIpGroup::
    server () const
    {
      return this->server_;
    }

    inline
    SharedIpGroup::ServerOptional& SharedIpGroup::
    server ()
    {
      return this->server_;
    }

    inline
    void SharedIpGroup::
    server (const ServerType& x)
    {
      this->server_.set (x);
    }

    inline
    void SharedIpGroup::
    server (const ServerOptional& x)
    {
      this->server_ = x;
    }

    inline
    void SharedIpGroup::
    server (::std::auto_ptr< ServerType > x)
    {
      this->server_.set (x);
    }

    inline
    const SharedIpGroup::ServersOptional& SharedIpGroup::
    servers () const
    {
      return this->servers_;
    }

    inline
    SharedIpGroup::ServersOptional& SharedIpGroup::
    servers ()
    {
      return this->servers_;
    }

    inline
    void SharedIpGroup::
    servers (const ServersType& x)
    {
      this->servers_.set (x);
    }

    inline
    void SharedIpGroup::
    servers (const ServersOptional& x)
    {
      this->servers_ = x;
    }

    inline
    void SharedIpGroup::
    servers (::std::auto_ptr< ServersType > x)
    {
      this->servers_.set (x);
    }

    inline
    const SharedIpGroup::IdOptional& SharedIpGroup::
    id () const
    {
      return this->id_;
    }

    inline
    SharedIpGroup::IdOptional& SharedIpGroup::
    id ()
    {
      return this->id_;
    }

    inline
    void SharedIpGroup::
    id (const IdType& x)
    {
      this->id_.set (x);
    }

    inline
    void SharedIpGroup::
    id (const IdOptional& x)
    {
      this->id_ = x;
    }

    inline
    const SharedIpGroup::NameType& SharedIpGroup::
    name () const
    {
      return this->name_.get ();
    }

    inline
    SharedIpGroup::NameType& SharedIpGroup::
    name ()
    {
      return this->name_.get ();
    }

    inline
    void SharedIpGroup::
    name (const NameType& x)
    {
      this->name_.set (x);
    }

    inline
    void SharedIpGroup::
    name (::std::auto_ptr< NameType > x)
    {
      this->name_.set (x);
    }


    // SharedIpGroups
    // 

    inline
    const SharedIpGroups::SharedIpGroupSequence& SharedIpGroups::
    sharedIpGroup () const
    {
      return this->sharedIpGroup_;
    }

    inline
    SharedIpGroups::SharedIpGroupSequence& SharedIpGroups::
    sharedIpGroup ()
    {
      return this->sharedIpGroup_;
    }

    inline
    void SharedIpGroups::
    sharedIpGroup (const SharedIpGroupSequence& s)
    {
      this->sharedIpGroup_ = s;
    }


    // ServerIDList
    // 

    inline
    const ServerIDList::ServerSequence& ServerIDList::
    server () const
    {
      return this->server_;
    }

    inline
    ServerIDList::ServerSequence& ServerIDList::
    server ()
    {
      return this->server_;
    }

    inline
    void ServerIDList::
    server (const ServerSequence& s)
    {
      this->server_ = s;
    }


    // ServerID
    // 

    inline
    const ServerID::IdType& ServerID::
    id () const
    {
      return this->id_.get ();
    }

    inline
    ServerID::IdType& ServerID::
    id ()
    {
      return this->id_.get ();
    }

    inline
    void ServerID::
    id (const IdType& x)
    {
      this->id_.set (x);
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // XSDS_IPGROUP_IPP
