// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "actions.hpp"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace openstack
{
  namespace xml
  {
    // Reboot_
    // 

    const ::xml_schema::Type* Reboot_::
    _value () const
    {
      return &this->value_.get ();
    }

    ::xml_schema::Type* Reboot_::
    _value ()
    {
      return &this->value_.get ();
    }

    Reboot_::
    Reboot_ (const ValueType& x)
    : value_ (x, 0, 0)
    {
    }

    Reboot_::
    Reboot_ (::std::auto_ptr< ValueType > p)
    : value_ (p, 0, 0)
    {
    }

    Reboot_::
    Reboot_ (const ::xercesc::DOMElement& e, ::xml_schema::Flags f)
    : value_ (f, 0)
    {
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == name_ && n.namespace_ () == namespace__)
        this->value_.set (ValueTraits::create (e, f, 0));
      else
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (), n.namespace_ (),
          name_, namespace__);
    }

    Reboot_::
    Reboot_ (const Reboot_& x, ::xml_schema::Flags f)
    : ::xml_schema::ElementType (),
      value_ (x.value_, f, 0)
    {
    }

    Reboot_* Reboot_::
    _clone (::xml_schema::Flags f) const
    {
      return new class Reboot_ (*this, f);
    }

    const ::std::string& Reboot_::
    name ()
    {
      return name_;
    }

    const ::std::string& Reboot_::
    namespace_ ()
    {
      return namespace__;
    }

    const ::std::string& Reboot_::
    _name () const
    {
      return name_;
    }

    const ::std::string& Reboot_::
    _namespace () const
    {
      return namespace__;
    }

    const ::std::string Reboot_::
    name_ ("reboot");

    const ::std::string Reboot_::
    namespace__ ("http://docs.rackspacecloud.com/servers/api/v1.0");

    Reboot_::
    ~Reboot_ ()
    {
    }

    static 
    const ::xsd::cxx::tree::parser_init< Reboot_, char, ::xml_schema::Type >
    _xsd_Reboot__parser_init (Reboot_::name (), Reboot_::namespace_ ());

    // Rebuild_
    // 

    const ::xml_schema::Type* Rebuild_::
    _value () const
    {
      return &this->value_.get ();
    }

    ::xml_schema::Type* Rebuild_::
    _value ()
    {
      return &this->value_.get ();
    }

    Rebuild_::
    Rebuild_ (const ValueType& x)
    : value_ (x, 0, 0)
    {
    }

    Rebuild_::
    Rebuild_ (::std::auto_ptr< ValueType > p)
    : value_ (p, 0, 0)
    {
    }

    Rebuild_::
    Rebuild_ (const ::xercesc::DOMElement& e, ::xml_schema::Flags f)
    : value_ (f, 0)
    {
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == name_ && n.namespace_ () == namespace__)
        this->value_.set (ValueTraits::create (e, f, 0));
      else
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (), n.namespace_ (),
          name_, namespace__);
    }

    Rebuild_::
    Rebuild_ (const Rebuild_& x, ::xml_schema::Flags f)
    : ::xml_schema::ElementType (),
      value_ (x.value_, f, 0)
    {
    }

    Rebuild_* Rebuild_::
    _clone (::xml_schema::Flags f) const
    {
      return new class Rebuild_ (*this, f);
    }

    const ::std::string& Rebuild_::
    name ()
    {
      return name_;
    }

    const ::std::string& Rebuild_::
    namespace_ ()
    {
      return namespace__;
    }

    const ::std::string& Rebuild_::
    _name () const
    {
      return name_;
    }

    const ::std::string& Rebuild_::
    _namespace () const
    {
      return namespace__;
    }

    const ::std::string Rebuild_::
    name_ ("rebuild");

    const ::std::string Rebuild_::
    namespace__ ("http://docs.rackspacecloud.com/servers/api/v1.0");

    Rebuild_::
    ~Rebuild_ ()
    {
    }

    static 
    const ::xsd::cxx::tree::parser_init< Rebuild_, char, ::xml_schema::Type >
    _xsd_Rebuild__parser_init (Rebuild_::name (), Rebuild_::namespace_ ());

    // Resize_
    // 

    const ::xml_schema::Type* Resize_::
    _value () const
    {
      return &this->value_.get ();
    }

    ::xml_schema::Type* Resize_::
    _value ()
    {
      return &this->value_.get ();
    }

    Resize_::
    Resize_ (const ValueType& x)
    : value_ (x, 0, 0)
    {
    }

    Resize_::
    Resize_ (::std::auto_ptr< ValueType > p)
    : value_ (p, 0, 0)
    {
    }

    Resize_::
    Resize_ (const ::xercesc::DOMElement& e, ::xml_schema::Flags f)
    : value_ (f, 0)
    {
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == name_ && n.namespace_ () == namespace__)
        this->value_.set (ValueTraits::create (e, f, 0));
      else
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (), n.namespace_ (),
          name_, namespace__);
    }

    Resize_::
    Resize_ (const Resize_& x, ::xml_schema::Flags f)
    : ::xml_schema::ElementType (),
      value_ (x.value_, f, 0)
    {
    }

    Resize_* Resize_::
    _clone (::xml_schema::Flags f) const
    {
      return new class Resize_ (*this, f);
    }

    const ::std::string& Resize_::
    name ()
    {
      return name_;
    }

    const ::std::string& Resize_::
    namespace_ ()
    {
      return namespace__;
    }

    const ::std::string& Resize_::
    _name () const
    {
      return name_;
    }

    const ::std::string& Resize_::
    _namespace () const
    {
      return namespace__;
    }

    const ::std::string Resize_::
    name_ ("resize");

    const ::std::string Resize_::
    namespace__ ("http://docs.rackspacecloud.com/servers/api/v1.0");

    Resize_::
    ~Resize_ ()
    {
    }

    static 
    const ::xsd::cxx::tree::parser_init< Resize_, char, ::xml_schema::Type >
    _xsd_Resize__parser_init (Resize_::name (), Resize_::namespace_ ());

    // ConfirmResize_
    // 

    const ::xml_schema::Type* ConfirmResize_::
    _value () const
    {
      return &this->value_.get ();
    }

    ::xml_schema::Type* ConfirmResize_::
    _value ()
    {
      return &this->value_.get ();
    }

    ConfirmResize_::
    ConfirmResize_ (const ValueType& x)
    : value_ (x, 0, 0)
    {
    }

    ConfirmResize_::
    ConfirmResize_ (::std::auto_ptr< ValueType > p)
    : value_ (p, 0, 0)
    {
    }

    ConfirmResize_::
    ConfirmResize_ (const ::xercesc::DOMElement& e, ::xml_schema::Flags f)
    : value_ (f, 0)
    {
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == name_ && n.namespace_ () == namespace__)
        this->value_.set (ValueTraits::create (e, f, 0));
      else
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (), n.namespace_ (),
          name_, namespace__);
    }

    ConfirmResize_::
    ConfirmResize_ (const ConfirmResize_& x, ::xml_schema::Flags f)
    : ::xml_schema::ElementType (),
      value_ (x.value_, f, 0)
    {
    }

    ConfirmResize_* ConfirmResize_::
    _clone (::xml_schema::Flags f) const
    {
      return new class ConfirmResize_ (*this, f);
    }

    const ::std::string& ConfirmResize_::
    name ()
    {
      return name_;
    }

    const ::std::string& ConfirmResize_::
    namespace_ ()
    {
      return namespace__;
    }

    const ::std::string& ConfirmResize_::
    _name () const
    {
      return name_;
    }

    const ::std::string& ConfirmResize_::
    _namespace () const
    {
      return namespace__;
    }

    const ::std::string ConfirmResize_::
    name_ ("confirmResize");

    const ::std::string ConfirmResize_::
    namespace__ ("http://docs.rackspacecloud.com/servers/api/v1.0");

    ConfirmResize_::
    ~ConfirmResize_ ()
    {
    }

    static 
    const ::xsd::cxx::tree::parser_init< ConfirmResize_, char, ::xml_schema::Type >
    _xsd_ConfirmResize__parser_init (ConfirmResize_::name (), ConfirmResize_::namespace_ ());

    // RevertResize_
    // 

    const ::xml_schema::Type* RevertResize_::
    _value () const
    {
      return &this->value_.get ();
    }

    ::xml_schema::Type* RevertResize_::
    _value ()
    {
      return &this->value_.get ();
    }

    RevertResize_::
    RevertResize_ (const ValueType& x)
    : value_ (x, 0, 0)
    {
    }

    RevertResize_::
    RevertResize_ (::std::auto_ptr< ValueType > p)
    : value_ (p, 0, 0)
    {
    }

    RevertResize_::
    RevertResize_ (const ::xercesc::DOMElement& e, ::xml_schema::Flags f)
    : value_ (f, 0)
    {
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == name_ && n.namespace_ () == namespace__)
        this->value_.set (ValueTraits::create (e, f, 0));
      else
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (), n.namespace_ (),
          name_, namespace__);
    }

    RevertResize_::
    RevertResize_ (const RevertResize_& x, ::xml_schema::Flags f)
    : ::xml_schema::ElementType (),
      value_ (x.value_, f, 0)
    {
    }

    RevertResize_* RevertResize_::
    _clone (::xml_schema::Flags f) const
    {
      return new class RevertResize_ (*this, f);
    }

    const ::std::string& RevertResize_::
    name ()
    {
      return name_;
    }

    const ::std::string& RevertResize_::
    namespace_ ()
    {
      return namespace__;
    }

    const ::std::string& RevertResize_::
    _name () const
    {
      return name_;
    }

    const ::std::string& RevertResize_::
    _namespace () const
    {
      return namespace__;
    }

    const ::std::string RevertResize_::
    name_ ("revertResize");

    const ::std::string RevertResize_::
    namespace__ ("http://docs.rackspacecloud.com/servers/api/v1.0");

    RevertResize_::
    ~RevertResize_ ()
    {
    }

    static 
    const ::xsd::cxx::tree::parser_init< RevertResize_, char, ::xml_schema::Type >
    _xsd_RevertResize__parser_init (RevertResize_::name (), RevertResize_::namespace_ ());

    // Action
    //

    Action::
    Action ()
    : ::xml_schema::Type ()
    {
    }

    Action::
    Action (const Action& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c)
    {
    }

    Action::
    Action (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f, c)
    {
    }

    Action::
    Action (const ::xercesc::DOMAttr& a,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (a, f, c)
    {
    }

    Action::
    Action (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (s, e, f, c)
    {
    }

    Action* Action::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Action (*this, f, c);
    }

    Action::
    ~Action ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, Action >
    _xsd_Action_type_factory_init (
      "Action",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // Reboot
    //

    Reboot::
    Reboot (const TypeType& type)
    : ::openstack::xml::Action (),
      type_ (type, ::xml_schema::Flags (), this)
    {
    }

    Reboot::
    Reboot (const Reboot& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::openstack::xml::Action (x, f, c),
      type_ (x.type_, f, this)
    {
    }

    Reboot::
    Reboot (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::openstack::xml::Action (e, f | ::xml_schema::Flags::base, c),
      type_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Reboot::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "type" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< TypeType > r (
            TypeTraits::create (i, f, this));

          this->type_.set (r);
          continue;
        }
      }

      if (!type_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "type",
          "");
      }
    }

    Reboot* Reboot::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Reboot (*this, f, c);
    }

    Reboot::
    ~Reboot ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, Reboot >
    _xsd_Reboot_type_factory_init (
      "Reboot",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // Rebuild
    //

    Rebuild::
    Rebuild (const ImageIdType& imageId)
    : ::openstack::xml::Action (),
      imageId_ (imageId, ::xml_schema::Flags (), this)
    {
    }

    Rebuild::
    Rebuild (const Rebuild& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::openstack::xml::Action (x, f, c),
      imageId_ (x.imageId_, f, this)
    {
    }

    Rebuild::
    Rebuild (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::openstack::xml::Action (e, f | ::xml_schema::Flags::base, c),
      imageId_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Rebuild::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "imageId" && n.namespace_ ().empty ())
        {
          this->imageId_.set (ImageIdTraits::create (i, f, this));
          continue;
        }
      }

      if (!imageId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "imageId",
          "");
      }
    }

    Rebuild* Rebuild::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Rebuild (*this, f, c);
    }

    Rebuild::
    ~Rebuild ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, Rebuild >
    _xsd_Rebuild_type_factory_init (
      "Rebuild",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // Resize
    //

    Resize::
    Resize (const FlavorIdType& flavorId)
    : ::openstack::xml::Action (),
      flavorId_ (flavorId, ::xml_schema::Flags (), this)
    {
    }

    Resize::
    Resize (const Resize& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::openstack::xml::Action (x, f, c),
      flavorId_ (x.flavorId_, f, this)
    {
    }

    Resize::
    Resize (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::openstack::xml::Action (e, f | ::xml_schema::Flags::base, c),
      flavorId_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Resize::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "flavorId" && n.namespace_ ().empty ())
        {
          this->flavorId_.set (FlavorIdTraits::create (i, f, this));
          continue;
        }
      }

      if (!flavorId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "flavorId",
          "");
      }
    }

    Resize* Resize::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Resize (*this, f, c);
    }

    Resize::
    ~Resize ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, Resize >
    _xsd_Resize_type_factory_init (
      "Resize",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // ConfirmResize
    //

    ConfirmResize::
    ConfirmResize ()
    : ::openstack::xml::Action ()
    {
    }

    ConfirmResize::
    ConfirmResize (const ConfirmResize& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::openstack::xml::Action (x, f, c)
    {
    }

    ConfirmResize::
    ConfirmResize (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::openstack::xml::Action (e, f, c)
    {
    }

    ConfirmResize::
    ConfirmResize (const ::xercesc::DOMAttr& a,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::openstack::xml::Action (a, f, c)
    {
    }

    ConfirmResize::
    ConfirmResize (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::openstack::xml::Action (s, e, f, c)
    {
    }

    ConfirmResize* ConfirmResize::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ConfirmResize (*this, f, c);
    }

    ConfirmResize::
    ~ConfirmResize ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ConfirmResize >
    _xsd_ConfirmResize_type_factory_init (
      "ConfirmResize",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // RevertResize
    //

    RevertResize::
    RevertResize ()
    : ::openstack::xml::Action ()
    {
    }

    RevertResize::
    RevertResize (const RevertResize& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::openstack::xml::Action (x, f, c)
    {
    }

    RevertResize::
    RevertResize (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::openstack::xml::Action (e, f, c)
    {
    }

    RevertResize::
    RevertResize (const ::xercesc::DOMAttr& a,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::openstack::xml::Action (a, f, c)
    {
    }

    RevertResize::
    RevertResize (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::openstack::xml::Action (s, e, f, c)
    {
    }

    RevertResize* RevertResize::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class RevertResize (*this, f, c);
    }

    RevertResize::
    ~RevertResize ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, RevertResize >
    _xsd_RevertResize_type_factory_init (
      "RevertResize",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // RebootType
    //

    RebootType::
    RebootType (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::String (e, f, c)
    {
      _xsd_RebootType_convert ();
    }

    RebootType::
    RebootType (const ::xercesc::DOMAttr& a,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::String (a, f, c)
    {
      _xsd_RebootType_convert ();
    }

    RebootType::
    RebootType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::String (s, e, f, c)
    {
      _xsd_RebootType_convert ();
    }

    RebootType* RebootType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class RebootType (*this, f, c);
    }

    RebootType::Value RebootType::
    _xsd_RebootType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RebootType_literals_);
      const Value* i (::std::lower_bound (
                        _xsd_RebootType_indexes_,
                        _xsd_RebootType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_RebootType_indexes_ + 2 || _xsd_RebootType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const RebootType::
    _xsd_RebootType_literals_[2] =
    {
      "HARD",
      "SOFT"
    };

    const RebootType::Value RebootType::
    _xsd_RebootType_indexes_[2] =
    {
      ::openstack::xml::RebootType::HARD,
      ::openstack::xml::RebootType::SOFT
    };

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, RebootType >
    _xsd_RebootType_type_factory_init (
      "RebootType",
      "http://docs.rackspacecloud.com/servers/api/v1.0");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

