// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XSDS_SERVER_IPP
#define XSDS_SERVER_IPP

// Begin prologue.
//
//
// End prologue.

#include "common.ipp"

namespace openstack
{
  namespace xml
  {
    // Server_
    // 

    inline
    const Server_::ValueType& Server_::
    value () const
    {
      return this->value_.get ();
    }

    inline
    Server_::ValueType& Server_::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void Server_::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void Server_::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // Servers_
    // 

    inline
    const Servers_::ValueType& Servers_::
    value () const
    {
      return this->value_.get ();
    }

    inline
    Servers_::ValueType& Servers_::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void Servers_::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void Servers_::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // Addresses_
    // 

    inline
    const Addresses_::ValueType& Addresses_::
    value () const
    {
      return this->value_.get ();
    }

    inline
    Addresses_::ValueType& Addresses_::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void Addresses_::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void Addresses_::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // Public
    // 

    inline
    const Public::ValueType& Public::
    value () const
    {
      return this->value_.get ();
    }

    inline
    Public::ValueType& Public::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void Public::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void Public::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // Private
    // 

    inline
    const Private::ValueType& Private::
    value () const
    {
      return this->value_.get ();
    }

    inline
    Private::ValueType& Private::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void Private::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void Private::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // ShareIp_
    // 

    inline
    const ShareIp_::ValueType& ShareIp_::
    value () const
    {
      return this->value_.get ();
    }

    inline
    ShareIp_::ValueType& ShareIp_::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void ShareIp_::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void ShareIp_::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // Server
    // 

    inline
    const Server::MetadataOptional& Server::
    metadata () const
    {
      return this->metadata_;
    }

    inline
    Server::MetadataOptional& Server::
    metadata ()
    {
      return this->metadata_;
    }

    inline
    void Server::
    metadata (const MetadataType& x)
    {
      this->metadata_.set (x);
    }

    inline
    void Server::
    metadata (const MetadataOptional& x)
    {
      this->metadata_ = x;
    }

    inline
    void Server::
    metadata (::std::auto_ptr< MetadataType > x)
    {
      this->metadata_.set (x);
    }

    inline
    const Server::AddressesOptional& Server::
    addresses () const
    {
      return this->addresses_;
    }

    inline
    Server::AddressesOptional& Server::
    addresses ()
    {
      return this->addresses_;
    }

    inline
    void Server::
    addresses (const AddressesType& x)
    {
      this->addresses_.set (x);
    }

    inline
    void Server::
    addresses (const AddressesOptional& x)
    {
      this->addresses_ = x;
    }

    inline
    void Server::
    addresses (::std::auto_ptr< AddressesType > x)
    {
      this->addresses_.set (x);
    }

    inline
    const Server::PersonalityOptional& Server::
    personality () const
    {
      return this->personality_;
    }

    inline
    Server::PersonalityOptional& Server::
    personality ()
    {
      return this->personality_;
    }

    inline
    void Server::
    personality (const PersonalityType& x)
    {
      this->personality_.set (x);
    }

    inline
    void Server::
    personality (const PersonalityOptional& x)
    {
      this->personality_ = x;
    }

    inline
    void Server::
    personality (::std::auto_ptr< PersonalityType > x)
    {
      this->personality_.set (x);
    }

    inline
    const Server::NameOptional& Server::
    name () const
    {
      return this->name_;
    }

    inline
    Server::NameOptional& Server::
    name ()
    {
      return this->name_;
    }

    inline
    void Server::
    name (const NameType& x)
    {
      this->name_.set (x);
    }

    inline
    void Server::
    name (const NameOptional& x)
    {
      this->name_ = x;
    }

    inline
    void Server::
    name (::std::auto_ptr< NameType > x)
    {
      this->name_.set (x);
    }

    inline
    const Server::IdOptional& Server::
    id () const
    {
      return this->id_;
    }

    inline
    Server::IdOptional& Server::
    id ()
    {
      return this->id_;
    }

    inline
    void Server::
    id (const IdType& x)
    {
      this->id_.set (x);
    }

    inline
    void Server::
    id (const IdOptional& x)
    {
      this->id_ = x;
    }

    inline
    const Server::AdminPassOptional& Server::
    adminPass () const
    {
      return this->adminPass_;
    }

    inline
    Server::AdminPassOptional& Server::
    adminPass ()
    {
      return this->adminPass_;
    }

    inline
    void Server::
    adminPass (const AdminPassType& x)
    {
      this->adminPass_.set (x);
    }

    inline
    void Server::
    adminPass (const AdminPassOptional& x)
    {
      this->adminPass_ = x;
    }

    inline
    void Server::
    adminPass (::std::auto_ptr< AdminPassType > x)
    {
      this->adminPass_.set (x);
    }

    inline
    const Server::ImageIdOptional& Server::
    imageId () const
    {
      return this->imageId_;
    }

    inline
    Server::ImageIdOptional& Server::
    imageId ()
    {
      return this->imageId_;
    }

    inline
    void Server::
    imageId (const ImageIdType& x)
    {
      this->imageId_.set (x);
    }

    inline
    void Server::
    imageId (const ImageIdOptional& x)
    {
      this->imageId_ = x;
    }

    inline
    const Server::FlavorIdOptional& Server::
    flavorId () const
    {
      return this->flavorId_;
    }

    inline
    Server::FlavorIdOptional& Server::
    flavorId ()
    {
      return this->flavorId_;
    }

    inline
    void Server::
    flavorId (const FlavorIdType& x)
    {
      this->flavorId_.set (x);
    }

    inline
    void Server::
    flavorId (const FlavorIdOptional& x)
    {
      this->flavorId_ = x;
    }

    inline
    const Server::HostIdOptional& Server::
    hostId () const
    {
      return this->hostId_;
    }

    inline
    Server::HostIdOptional& Server::
    hostId ()
    {
      return this->hostId_;
    }

    inline
    void Server::
    hostId (const HostIdType& x)
    {
      this->hostId_.set (x);
    }

    inline
    void Server::
    hostId (const HostIdOptional& x)
    {
      this->hostId_ = x;
    }

    inline
    void Server::
    hostId (::std::auto_ptr< HostIdType > x)
    {
      this->hostId_.set (x);
    }

    inline
    const Server::ProgressOptional& Server::
    progress () const
    {
      return this->progress_;
    }

    inline
    Server::ProgressOptional& Server::
    progress ()
    {
      return this->progress_;
    }

    inline
    void Server::
    progress (const ProgressType& x)
    {
      this->progress_.set (x);
    }

    inline
    void Server::
    progress (const ProgressOptional& x)
    {
      this->progress_ = x;
    }

    inline
    void Server::
    progress (::std::auto_ptr< ProgressType > x)
    {
      this->progress_.set (x);
    }

    inline
    const Server::StatusOptional& Server::
    status () const
    {
      return this->status_;
    }

    inline
    Server::StatusOptional& Server::
    status ()
    {
      return this->status_;
    }

    inline
    void Server::
    status (const StatusType& x)
    {
      this->status_.set (x);
    }

    inline
    void Server::
    status (const StatusOptional& x)
    {
      this->status_ = x;
    }

    inline
    void Server::
    status (::std::auto_ptr< StatusType > x)
    {
      this->status_.set (x);
    }

    inline
    const Server::SharedIpGroupIdOptional& Server::
    sharedIpGroupId () const
    {
      return this->sharedIpGroupId_;
    }

    inline
    Server::SharedIpGroupIdOptional& Server::
    sharedIpGroupId ()
    {
      return this->sharedIpGroupId_;
    }

    inline
    void Server::
    sharedIpGroupId (const SharedIpGroupIdType& x)
    {
      this->sharedIpGroupId_.set (x);
    }

    inline
    void Server::
    sharedIpGroupId (const SharedIpGroupIdOptional& x)
    {
      this->sharedIpGroupId_ = x;
    }


    // Servers
    // 

    inline
    const Servers::ServerSequence& Servers::
    server () const
    {
      return this->server_;
    }

    inline
    Servers::ServerSequence& Servers::
    server ()
    {
      return this->server_;
    }

    inline
    void Servers::
    server (const ServerSequence& s)
    {
      this->server_ = s;
    }


    // Metadata
    // 

    inline
    const Metadata::MetaSequence& Metadata::
    meta () const
    {
      return this->meta_;
    }

    inline
    Metadata::MetaSequence& Metadata::
    meta ()
    {
      return this->meta_;
    }

    inline
    void Metadata::
    meta (const MetaSequence& s)
    {
      this->meta_ = s;
    }


    // MetadataValue
    // 


    // MetadataItem
    // 

    inline
    const MetadataItem::KeyType& MetadataItem::
    key () const
    {
      return this->key_.get ();
    }

    inline
    MetadataItem::KeyType& MetadataItem::
    key ()
    {
      return this->key_.get ();
    }

    inline
    void MetadataItem::
    key (const KeyType& x)
    {
      this->key_.set (x);
    }

    inline
    void MetadataItem::
    key (::std::auto_ptr< KeyType > x)
    {
      this->key_.set (x);
    }


    // Personality
    // 

    inline
    const Personality::FileSequence& Personality::
    file () const
    {
      return this->file_;
    }

    inline
    Personality::FileSequence& Personality::
    file ()
    {
      return this->file_;
    }

    inline
    void Personality::
    file (const FileSequence& s)
    {
      this->file_ = s;
    }


    // FileContent
    // 


    // File
    // 

    inline
    const File::PathType& File::
    path () const
    {
      return this->path_.get ();
    }

    inline
    File::PathType& File::
    path ()
    {
      return this->path_.get ();
    }

    inline
    void File::
    path (const PathType& x)
    {
      this->path_.set (x);
    }

    inline
    void File::
    path (::std::auto_ptr< PathType > x)
    {
      this->path_.set (x);
    }


    // Addresses
    // 

    inline
    const Addresses::PublicOptional& Addresses::
    public_ () const
    {
      return this->public__;
    }

    inline
    Addresses::PublicOptional& Addresses::
    public_ ()
    {
      return this->public__;
    }

    inline
    void Addresses::
    public_ (const PublicType& x)
    {
      this->public__.set (x);
    }

    inline
    void Addresses::
    public_ (const PublicOptional& x)
    {
      this->public__ = x;
    }

    inline
    void Addresses::
    public_ (::std::auto_ptr< PublicType > x)
    {
      this->public__.set (x);
    }

    inline
    const Addresses::PrivateOptional& Addresses::
    private_ () const
    {
      return this->private__;
    }

    inline
    Addresses::PrivateOptional& Addresses::
    private_ ()
    {
      return this->private__;
    }

    inline
    void Addresses::
    private_ (const PrivateType& x)
    {
      this->private__.set (x);
    }

    inline
    void Addresses::
    private_ (const PrivateOptional& x)
    {
      this->private__ = x;
    }

    inline
    void Addresses::
    private_ (::std::auto_ptr< PrivateType > x)
    {
      this->private__.set (x);
    }


    // AddressList
    // 

    inline
    const AddressList::IpSequence& AddressList::
    ip () const
    {
      return this->ip_;
    }

    inline
    AddressList::IpSequence& AddressList::
    ip ()
    {
      return this->ip_;
    }

    inline
    void AddressList::
    ip (const IpSequence& s)
    {
      this->ip_ = s;
    }


    // Address
    // 

    inline
    const Address::AddrType& Address::
    addr () const
    {
      return this->addr_.get ();
    }

    inline
    Address::AddrType& Address::
    addr ()
    {
      return this->addr_.get ();
    }

    inline
    void Address::
    addr (const AddrType& x)
    {
      this->addr_.set (x);
    }

    inline
    void Address::
    addr (::std::auto_ptr< AddrType > x)
    {
      this->addr_.set (x);
    }


    // ShareIp
    // 

    inline
    const ShareIp::SharedIpGroupIdType& ShareIp::
    sharedIpGroupId () const
    {
      return this->sharedIpGroupId_.get ();
    }

    inline
    ShareIp::SharedIpGroupIdType& ShareIp::
    sharedIpGroupId ()
    {
      return this->sharedIpGroupId_.get ();
    }

    inline
    void ShareIp::
    sharedIpGroupId (const SharedIpGroupIdType& x)
    {
      this->sharedIpGroupId_.set (x);
    }

    inline
    const ShareIp::ConfigureServerType& ShareIp::
    configureServer () const
    {
      return this->configureServer_.get ();
    }

    inline
    ShareIp::ConfigureServerType& ShareIp::
    configureServer ()
    {
      return this->configureServer_.get ();
    }

    inline
    void ShareIp::
    configureServer (const ConfigureServerType& x)
    {
      this->configureServer_.set (x);
    }

    inline
    ShareIp::ConfigureServerType ShareIp::
    configureServerDefaultValue ()
    {
      return ConfigureServerType (false);
    }


    // ServerStatus
    // 

    inline
    ServerStatus::
    ServerStatus (Value v)
    : ::xml_schema::String (_xsd_ServerStatus_literals_[v])
    {
    }

    inline
    ServerStatus::
    ServerStatus (const char* v)
    : ::xml_schema::String (v)
    {
    }

    inline
    ServerStatus::
    ServerStatus (const ::std::string& v)
    : ::xml_schema::String (v)
    {
    }

    inline
    ServerStatus::
    ServerStatus (const ::xml_schema::String& v)
    : ::xml_schema::String (v)
    {
    }

    inline
    ServerStatus::
    ServerStatus (const ServerStatus& v,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::String (v, f, c)
    {
    }

    inline
    ServerStatus& ServerStatus::
    operator= (Value v)
    {
      static_cast< ::xml_schema::String& > (*this) = 
      ::xml_schema::String (_xsd_ServerStatus_literals_[v]);

      return *this;
    }


    // FileName
    // 


    // MetadataKey
    // 
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // XSDS_SERVER_IPP
