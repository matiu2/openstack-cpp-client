// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "version.hpp"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace openstack
{
  namespace xml
  {
    // Version_
    // 

    const ::xml_schema::Type* Version_::
    _value () const
    {
      return &this->value_.get ();
    }

    ::xml_schema::Type* Version_::
    _value ()
    {
      return &this->value_.get ();
    }

    Version_::
    Version_ (const ValueType& x)
    : value_ (x, 0, 0)
    {
    }

    Version_::
    Version_ (::std::auto_ptr< ValueType > p)
    : value_ (p, 0, 0)
    {
    }

    Version_::
    Version_ (const ::xercesc::DOMElement& e, ::xml_schema::Flags f)
    : value_ (f, 0)
    {
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == name_ && n.namespace_ () == namespace__)
        this->value_.set (ValueTraits::create (e, f, 0));
      else
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (), n.namespace_ (),
          name_, namespace__);
    }

    Version_::
    Version_ (const Version_& x, ::xml_schema::Flags f)
    : ::xml_schema::ElementType (),
      value_ (x.value_, f, 0)
    {
    }

    Version_* Version_::
    _clone (::xml_schema::Flags f) const
    {
      return new class Version_ (*this, f);
    }

    const ::std::string& Version_::
    name ()
    {
      return name_;
    }

    const ::std::string& Version_::
    namespace_ ()
    {
      return namespace__;
    }

    const ::std::string& Version_::
    _name () const
    {
      return name_;
    }

    const ::std::string& Version_::
    _namespace () const
    {
      return namespace__;
    }

    const ::std::string Version_::
    name_ ("version");

    const ::std::string Version_::
    namespace__ ("http://docs.rackspacecloud.com/servers/api/v1.0");

    Version_::
    ~Version_ ()
    {
    }

    static 
    const ::xsd::cxx::tree::parser_init< Version_, char, ::xml_schema::Type >
    _xsd_Version__parser_init (Version_::name (), Version_::namespace_ ());

    // Version
    //

    const Version::IdType Version::id_default_value_ (
      "v1.0");

    Version::
    Version (const StatusType& status,
             const DocURLType& docURL,
             const WadlType& wadl)
    : ::xml_schema::Type (),
      id_ (idDefaultValue (), ::xml_schema::Flags (), this),
      status_ (status, ::xml_schema::Flags (), this),
      docURL_ (docURL, ::xml_schema::Flags (), this),
      wadl_ (wadl, ::xml_schema::Flags (), this)
    {
    }

    Version::
    Version (const Version& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      id_ (x.id_, f, this),
      status_ (x.status_, f, this),
      docURL_ (x.docURL_, f, this),
      wadl_ (x.wadl_, f, this)
    {
    }

    Version::
    Version (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      id_ (f, this),
      status_ (f, this),
      docURL_ (f, this),
      wadl_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Version::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< IdType > r (
            IdTraits::create (i, f, this));

          this->id_.set (r);
          continue;
        }

        if (n.name () == "status" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< StatusType > r (
            StatusTraits::create (i, f, this));

          this->status_.set (r);
          continue;
        }

        if (n.name () == "docURL" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< DocURLType > r (
            DocURLTraits::create (i, f, this));

          this->docURL_.set (r);
          continue;
        }

        if (n.name () == "wadl" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< WadlType > r (
            WadlTraits::create (i, f, this));

          this->wadl_.set (r);
          continue;
        }
      }

      if (!id_.present ())
      {
        this->id_.set (idDefaultValue ());
      }

      if (!status_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "status",
          "");
      }

      if (!docURL_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "docURL",
          "");
      }

      if (!wadl_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "wadl",
          "");
      }
    }

    Version* Version::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Version (*this, f, c);
    }

    Version::
    ~Version ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, Version >
    _xsd_Version_type_factory_init (
      "Version",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // VersionStatus
    //

    VersionStatus::
    VersionStatus (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::String (e, f, c)
    {
      _xsd_VersionStatus_convert ();
    }

    VersionStatus::
    VersionStatus (const ::xercesc::DOMAttr& a,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::String (a, f, c)
    {
      _xsd_VersionStatus_convert ();
    }

    VersionStatus::
    VersionStatus (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::String (s, e, f, c)
    {
      _xsd_VersionStatus_convert ();
    }

    VersionStatus* VersionStatus::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class VersionStatus (*this, f, c);
    }

    VersionStatus::Value VersionStatus::
    _xsd_VersionStatus_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VersionStatus_literals_);
      const Value* i (::std::lower_bound (
                        _xsd_VersionStatus_indexes_,
                        _xsd_VersionStatus_indexes_ + 3,
                        *this,
                        c));

      if (i == _xsd_VersionStatus_indexes_ + 3 || _xsd_VersionStatus_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const VersionStatus::
    _xsd_VersionStatus_literals_[3] =
    {
      "BETA",
      "CURRENT",
      "DEPRECATED"
    };

    const VersionStatus::Value VersionStatus::
    _xsd_VersionStatus_indexes_[3] =
    {
      ::openstack::xml::VersionStatus::BETA,
      ::openstack::xml::VersionStatus::CURRENT,
      ::openstack::xml::VersionStatus::DEPRECATED
    };

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, VersionStatus >
    _xsd_VersionStatus_type_factory_init (
      "VersionStatus",
      "http://docs.rackspacecloud.com/servers/api/v1.0");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

