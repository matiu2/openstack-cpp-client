// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XSDS_FAULTS_IPP
#define XSDS_FAULTS_IPP

// Begin prologue.
//
//
// End prologue.

namespace openstack
{
  namespace xml
  {
    // CloudServersFault
    // 

    inline
    const CloudServersFault::ValueType& CloudServersFault::
    value () const
    {
      return this->value_.get ();
    }

    inline
    CloudServersFault::ValueType& CloudServersFault::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void CloudServersFault::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void CloudServersFault::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // ItemNotFound
    // 

    inline
    const ItemNotFound::ValueType& ItemNotFound::
    value () const
    {
      return this->value_.get ();
    }

    inline
    ItemNotFound::ValueType& ItemNotFound::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void ItemNotFound::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void ItemNotFound::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // BuildInProgress
    // 

    inline
    const BuildInProgress::ValueType& BuildInProgress::
    value () const
    {
      return this->value_.get ();
    }

    inline
    BuildInProgress::ValueType& BuildInProgress::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void BuildInProgress::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void BuildInProgress::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // ServerCapacityUnavailable
    // 

    inline
    const ServerCapacityUnavailable::ValueType& ServerCapacityUnavailable::
    value () const
    {
      return this->value_.get ();
    }

    inline
    ServerCapacityUnavailable::ValueType& ServerCapacityUnavailable::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void ServerCapacityUnavailable::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void ServerCapacityUnavailable::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // BackupOrResizeInProgress
    // 

    inline
    const BackupOrResizeInProgress::ValueType& BackupOrResizeInProgress::
    value () const
    {
      return this->value_.get ();
    }

    inline
    BackupOrResizeInProgress::ValueType& BackupOrResizeInProgress::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void BackupOrResizeInProgress::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void BackupOrResizeInProgress::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // ResizeNotAllowed
    // 

    inline
    const ResizeNotAllowed::ValueType& ResizeNotAllowed::
    value () const
    {
      return this->value_.get ();
    }

    inline
    ResizeNotAllowed::ValueType& ResizeNotAllowed::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void ResizeNotAllowed::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void ResizeNotAllowed::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // ServiceUnavailable
    // 

    inline
    const ServiceUnavailable::ValueType& ServiceUnavailable::
    value () const
    {
      return this->value_.get ();
    }

    inline
    ServiceUnavailable::ValueType& ServiceUnavailable::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void ServiceUnavailable::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void ServiceUnavailable::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // Unauthorized
    // 

    inline
    const Unauthorized::ValueType& Unauthorized::
    value () const
    {
      return this->value_.get ();
    }

    inline
    Unauthorized::ValueType& Unauthorized::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void Unauthorized::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void Unauthorized::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // OverLimit
    // 

    inline
    const OverLimit::ValueType& OverLimit::
    value () const
    {
      return this->value_.get ();
    }

    inline
    OverLimit::ValueType& OverLimit::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void OverLimit::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void OverLimit::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // BadRequest
    // 

    inline
    const BadRequest::ValueType& BadRequest::
    value () const
    {
      return this->value_.get ();
    }

    inline
    BadRequest::ValueType& BadRequest::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void BadRequest::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void BadRequest::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // BadMediaType
    // 

    inline
    const BadMediaType::ValueType& BadMediaType::
    value () const
    {
      return this->value_.get ();
    }

    inline
    BadMediaType::ValueType& BadMediaType::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void BadMediaType::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void BadMediaType::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // BadMethod
    // 

    inline
    const BadMethod::ValueType& BadMethod::
    value () const
    {
      return this->value_.get ();
    }

    inline
    BadMethod::ValueType& BadMethod::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void BadMethod::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void BadMethod::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // NotImplemented
    // 

    inline
    const NotImplemented::ValueType& NotImplemented::
    value () const
    {
      return this->value_.get ();
    }

    inline
    NotImplemented::ValueType& NotImplemented::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void NotImplemented::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void NotImplemented::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // CloudServersAPIFault
    // 

    inline
    const CloudServersAPIFault::MessageType& CloudServersAPIFault::
    message () const
    {
      return this->message_.get ();
    }

    inline
    CloudServersAPIFault::MessageType& CloudServersAPIFault::
    message ()
    {
      return this->message_.get ();
    }

    inline
    void CloudServersAPIFault::
    message (const MessageType& x)
    {
      this->message_.set (x);
    }

    inline
    void CloudServersAPIFault::
    message (::std::auto_ptr< MessageType > x)
    {
      this->message_.set (x);
    }

    inline
    const CloudServersAPIFault::DetailsOptional& CloudServersAPIFault::
    details () const
    {
      return this->details_;
    }

    inline
    CloudServersAPIFault::DetailsOptional& CloudServersAPIFault::
    details ()
    {
      return this->details_;
    }

    inline
    void CloudServersAPIFault::
    details (const DetailsType& x)
    {
      this->details_.set (x);
    }

    inline
    void CloudServersAPIFault::
    details (const DetailsOptional& x)
    {
      this->details_ = x;
    }

    inline
    void CloudServersAPIFault::
    details (::std::auto_ptr< DetailsType > x)
    {
      this->details_.set (x);
    }

    inline
    const CloudServersAPIFault::CodeType& CloudServersAPIFault::
    code () const
    {
      return this->code_.get ();
    }

    inline
    CloudServersAPIFault::CodeType& CloudServersAPIFault::
    code ()
    {
      return this->code_.get ();
    }

    inline
    void CloudServersAPIFault::
    code (const CodeType& x)
    {
      this->code_.set (x);
    }


    // ItemNotFoundAPIFault
    // 


    // BuildInProgressAPIFault
    // 


    // ServerCapacityUnavailableAPIFault
    // 


    // BackupOrResizeInProgressAPIFault
    // 


    // ResizeNotAllowedAPIFault
    // 


    // ServiceUnavailableAPIFault
    // 


    // UnauthorizedAPIFault
    // 


    // OverLimitAPIFault
    // 

    inline
    const OverLimitAPIFault::RetryAfterOptional& OverLimitAPIFault::
    retryAfter () const
    {
      return this->retryAfter_;
    }

    inline
    OverLimitAPIFault::RetryAfterOptional& OverLimitAPIFault::
    retryAfter ()
    {
      return this->retryAfter_;
    }

    inline
    void OverLimitAPIFault::
    retryAfter (const RetryAfterType& x)
    {
      this->retryAfter_.set (x);
    }

    inline
    void OverLimitAPIFault::
    retryAfter (const RetryAfterOptional& x)
    {
      this->retryAfter_ = x;
    }

    inline
    void OverLimitAPIFault::
    retryAfter (::std::auto_ptr< RetryAfterType > x)
    {
      this->retryAfter_.set (x);
    }


    // BadRequestAPIFault
    // 


    // BadMediaTypeAPIFault
    // 


    // BadMethodAPIFault
    // 


    // NotImplementedAPIFault
    // 
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // XSDS_FAULTS_IPP
