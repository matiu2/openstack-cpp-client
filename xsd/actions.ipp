// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XSDS_ACTIONS_IPP
#define XSDS_ACTIONS_IPP

// Begin prologue.
//
//
// End prologue.

namespace openstack
{
  namespace xml
  {
    // Reboot_
    // 

    inline
    const Reboot_::ValueType& Reboot_::
    value () const
    {
      return this->value_.get ();
    }

    inline
    Reboot_::ValueType& Reboot_::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void Reboot_::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void Reboot_::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // Rebuild_
    // 

    inline
    const Rebuild_::ValueType& Rebuild_::
    value () const
    {
      return this->value_.get ();
    }

    inline
    Rebuild_::ValueType& Rebuild_::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void Rebuild_::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void Rebuild_::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // Resize_
    // 

    inline
    const Resize_::ValueType& Resize_::
    value () const
    {
      return this->value_.get ();
    }

    inline
    Resize_::ValueType& Resize_::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void Resize_::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void Resize_::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // ConfirmResize_
    // 

    inline
    const ConfirmResize_::ValueType& ConfirmResize_::
    value () const
    {
      return this->value_.get ();
    }

    inline
    ConfirmResize_::ValueType& ConfirmResize_::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void ConfirmResize_::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void ConfirmResize_::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // RevertResize_
    // 

    inline
    const RevertResize_::ValueType& RevertResize_::
    value () const
    {
      return this->value_.get ();
    }

    inline
    RevertResize_::ValueType& RevertResize_::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void RevertResize_::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void RevertResize_::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // Action
    // 


    // Reboot
    // 

    inline
    const Reboot::TypeType& Reboot::
    type () const
    {
      return this->type_.get ();
    }

    inline
    Reboot::TypeType& Reboot::
    type ()
    {
      return this->type_.get ();
    }

    inline
    void Reboot::
    type (const TypeType& x)
    {
      this->type_.set (x);
    }

    inline
    void Reboot::
    type (::std::auto_ptr< TypeType > x)
    {
      this->type_.set (x);
    }


    // Rebuild
    // 

    inline
    const Rebuild::ImageIdType& Rebuild::
    imageId () const
    {
      return this->imageId_.get ();
    }

    inline
    Rebuild::ImageIdType& Rebuild::
    imageId ()
    {
      return this->imageId_.get ();
    }

    inline
    void Rebuild::
    imageId (const ImageIdType& x)
    {
      this->imageId_.set (x);
    }


    // Resize
    // 

    inline
    const Resize::FlavorIdType& Resize::
    flavorId () const
    {
      return this->flavorId_.get ();
    }

    inline
    Resize::FlavorIdType& Resize::
    flavorId ()
    {
      return this->flavorId_.get ();
    }

    inline
    void Resize::
    flavorId (const FlavorIdType& x)
    {
      this->flavorId_.set (x);
    }


    // ConfirmResize
    // 


    // RevertResize
    // 


    // RebootType
    // 

    inline
    RebootType::
    RebootType (Value v)
    : ::xml_schema::String (_xsd_RebootType_literals_[v])
    {
    }

    inline
    RebootType::
    RebootType (const char* v)
    : ::xml_schema::String (v)
    {
    }

    inline
    RebootType::
    RebootType (const ::std::string& v)
    : ::xml_schema::String (v)
    {
    }

    inline
    RebootType::
    RebootType (const ::xml_schema::String& v)
    : ::xml_schema::String (v)
    {
    }

    inline
    RebootType::
    RebootType (const RebootType& v,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::String (v, f, c)
    {
    }

    inline
    RebootType& RebootType::
    operator= (Value v)
    {
      static_cast< ::xml_schema::String& > (*this) = 
      ::xml_schema::String (_xsd_RebootType_literals_[v]);

      return *this;
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // XSDS_ACTIONS_IPP
