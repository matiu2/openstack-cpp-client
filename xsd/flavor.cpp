// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "flavor.hpp"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace openstack
{
  namespace xml
  {
    // Flavor_
    // 

    const ::xml_schema::Type* Flavor_::
    _value () const
    {
      return &this->value_.get ();
    }

    ::xml_schema::Type* Flavor_::
    _value ()
    {
      return &this->value_.get ();
    }

    Flavor_::
    Flavor_ (const ValueType& x)
    : value_ (x, 0, 0)
    {
    }

    Flavor_::
    Flavor_ (::std::auto_ptr< ValueType > p)
    : value_ (p, 0, 0)
    {
    }

    Flavor_::
    Flavor_ (const ::xercesc::DOMElement& e, ::xml_schema::Flags f)
    : value_ (f, 0)
    {
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == name_ && n.namespace_ () == namespace__)
        this->value_.set (ValueTraits::create (e, f, 0));
      else
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (), n.namespace_ (),
          name_, namespace__);
    }

    Flavor_::
    Flavor_ (const Flavor_& x, ::xml_schema::Flags f)
    : ::xml_schema::ElementType (),
      value_ (x.value_, f, 0)
    {
    }

    Flavor_* Flavor_::
    _clone (::xml_schema::Flags f) const
    {
      return new class Flavor_ (*this, f);
    }

    const ::std::string& Flavor_::
    name ()
    {
      return name_;
    }

    const ::std::string& Flavor_::
    namespace_ ()
    {
      return namespace__;
    }

    const ::std::string& Flavor_::
    _name () const
    {
      return name_;
    }

    const ::std::string& Flavor_::
    _namespace () const
    {
      return namespace__;
    }

    const ::std::string Flavor_::
    name_ ("flavor");

    const ::std::string Flavor_::
    namespace__ ("http://docs.rackspacecloud.com/servers/api/v1.0");

    Flavor_::
    ~Flavor_ ()
    {
    }

    static 
    const ::xsd::cxx::tree::parser_init< Flavor_, char, ::xml_schema::Type >
    _xsd_Flavor__parser_init (Flavor_::name (), Flavor_::namespace_ ());

    // Flavors_
    // 

    const ::xml_schema::Type* Flavors_::
    _value () const
    {
      return &this->value_.get ();
    }

    ::xml_schema::Type* Flavors_::
    _value ()
    {
      return &this->value_.get ();
    }

    Flavors_::
    Flavors_ (const ValueType& x)
    : value_ (x, 0, 0)
    {
    }

    Flavors_::
    Flavors_ (::std::auto_ptr< ValueType > p)
    : value_ (p, 0, 0)
    {
    }

    Flavors_::
    Flavors_ (const ::xercesc::DOMElement& e, ::xml_schema::Flags f)
    : value_ (f, 0)
    {
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == name_ && n.namespace_ () == namespace__)
        this->value_.set (ValueTraits::create (e, f, 0));
      else
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (), n.namespace_ (),
          name_, namespace__);
    }

    Flavors_::
    Flavors_ (const Flavors_& x, ::xml_schema::Flags f)
    : ::xml_schema::ElementType (),
      value_ (x.value_, f, 0)
    {
    }

    Flavors_* Flavors_::
    _clone (::xml_schema::Flags f) const
    {
      return new class Flavors_ (*this, f);
    }

    const ::std::string& Flavors_::
    name ()
    {
      return name_;
    }

    const ::std::string& Flavors_::
    namespace_ ()
    {
      return namespace__;
    }

    const ::std::string& Flavors_::
    _name () const
    {
      return name_;
    }

    const ::std::string& Flavors_::
    _namespace () const
    {
      return namespace__;
    }

    const ::std::string Flavors_::
    name_ ("flavors");

    const ::std::string Flavors_::
    namespace__ ("http://docs.rackspacecloud.com/servers/api/v1.0");

    Flavors_::
    ~Flavors_ ()
    {
    }

    static 
    const ::xsd::cxx::tree::parser_init< Flavors_, char, ::xml_schema::Type >
    _xsd_Flavors__parser_init (Flavors_::name (), Flavors_::namespace_ ());

    // Flavor
    //

    Flavor::
    Flavor (const IdType& id,
            const NameType& name)
    : ::xml_schema::Type (),
      id_ (id, ::xml_schema::Flags (), this),
      name_ (name, ::xml_schema::Flags (), this),
      ram_ (::xml_schema::Flags (), this),
      disk_ (::xml_schema::Flags (), this)
    {
    }

    Flavor::
    Flavor (const Flavor& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      id_ (x.id_, f, this),
      name_ (x.name_, f, this),
      ram_ (x.ram_, f, this),
      disk_ (x.disk_, f, this)
    {
    }

    Flavor::
    Flavor (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      id_ (f, this),
      name_ (f, this),
      ram_ (f, this),
      disk_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Flavor::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          this->id_.set (IdTraits::create (i, f, this));
          continue;
        }

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< NameType > r (
            NameTraits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "ram" && n.namespace_ ().empty ())
        {
          this->ram_.set (RamTraits::create (i, f, this));
          continue;
        }

        if (n.name () == "disk" && n.namespace_ ().empty ())
        {
          this->disk_.set (DiskTraits::create (i, f, this));
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "id",
          "");
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }
    }

    Flavor* Flavor::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Flavor (*this, f, c);
    }

    Flavor::
    ~Flavor ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, Flavor >
    _xsd_Flavor_type_factory_init (
      "Flavor",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // Flavors
    //

    Flavors::
    Flavors ()
    : ::xml_schema::Type (),
      flavor_ (::xml_schema::Flags (), this)
    {
    }

    Flavors::
    Flavors (const Flavors& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      flavor_ (x.flavor_, f, this)
    {
    }

    Flavors::
    Flavors (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      flavor_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void Flavors::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // flavor
        //
        {
          ::xsd::cxx::tree::type_factory_map< char >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              "flavor",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              &::xsd::cxx::tree::factory_impl< FlavorType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< FlavorType > r (
              dynamic_cast< FlavorType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->flavor_.push_back (r);
            continue;
          }
        }

        break;
      }
    }

    Flavors* Flavors::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Flavors (*this, f, c);
    }

    Flavors::
    ~Flavors ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, Flavors >
    _xsd_Flavors_type_factory_init (
      "Flavors",
      "http://docs.rackspacecloud.com/servers/api/v1.0");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

