// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "backup.hpp"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace openstack
{
  namespace xml
  {
    // BackupSchedule
    //

    BackupSchedule::
    BackupSchedule (const EnabledType& enabled,
                    const WeeklyType& weekly,
                    const DailyType& daily)
    : ::xml_schema::Type (),
      enabled_ (enabled, ::xml_schema::Flags (), this),
      weekly_ (weekly, ::xml_schema::Flags (), this),
      daily_ (daily, ::xml_schema::Flags (), this)
    {
    }

    BackupSchedule::
    BackupSchedule (const BackupSchedule& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      enabled_ (x.enabled_, f, this),
      weekly_ (x.weekly_, f, this),
      daily_ (x.daily_, f, this)
    {
    }

    BackupSchedule::
    BackupSchedule (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      enabled_ (f, this),
      weekly_ (f, this),
      daily_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void BackupSchedule::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "enabled" && n.namespace_ ().empty ())
        {
          this->enabled_.set (EnabledTraits::create (i, f, this));
          continue;
        }

        if (n.name () == "weekly" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< WeeklyType > r (
            WeeklyTraits::create (i, f, this));

          this->weekly_.set (r);
          continue;
        }

        if (n.name () == "daily" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< DailyType > r (
            DailyTraits::create (i, f, this));

          this->daily_.set (r);
          continue;
        }
      }

      if (!enabled_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "enabled",
          "");
      }

      if (!weekly_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "weekly",
          "");
      }

      if (!daily_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "daily",
          "");
      }
    }

    BackupSchedule* BackupSchedule::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class BackupSchedule (*this, f, c);
    }

    BackupSchedule::
    ~BackupSchedule ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, BackupSchedule >
    _xsd_BackupSchedule_type_factory_init (
      "BackupSchedule",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // DailyBackup
    //

    DailyBackup::
    DailyBackup (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::String (e, f, c)
    {
      _xsd_DailyBackup_convert ();
    }

    DailyBackup::
    DailyBackup (const ::xercesc::DOMAttr& a,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::String (a, f, c)
    {
      _xsd_DailyBackup_convert ();
    }

    DailyBackup::
    DailyBackup (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::String (s, e, f, c)
    {
      _xsd_DailyBackup_convert ();
    }

    DailyBackup* DailyBackup::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class DailyBackup (*this, f, c);
    }

    DailyBackup::Value DailyBackup::
    _xsd_DailyBackup_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_DailyBackup_literals_);
      const Value* i (::std::lower_bound (
                        _xsd_DailyBackup_indexes_,
                        _xsd_DailyBackup_indexes_ + 13,
                        *this,
                        c));

      if (i == _xsd_DailyBackup_indexes_ + 13 || _xsd_DailyBackup_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const DailyBackup::
    _xsd_DailyBackup_literals_[13] =
    {
      "DISABLED",
      "H_0000_0200",
      "H_0200_0400",
      "H_0400_0600",
      "H_0600_0800",
      "H_0800_1000",
      "H_1000_1200",
      "H_1200_1400",
      "H_1400_1600",
      "H_1600_1800",
      "H_1800_2000",
      "H_2000_2200",
      "H_2200_0000"
    };

    const DailyBackup::Value DailyBackup::
    _xsd_DailyBackup_indexes_[13] =
    {
      ::openstack::xml::DailyBackup::DISABLED,
      ::openstack::xml::DailyBackup::H_0000_0200,
      ::openstack::xml::DailyBackup::H_0200_0400,
      ::openstack::xml::DailyBackup::H_0400_0600,
      ::openstack::xml::DailyBackup::H_0600_0800,
      ::openstack::xml::DailyBackup::H_0800_1000,
      ::openstack::xml::DailyBackup::H_1000_1200,
      ::openstack::xml::DailyBackup::H_1200_1400,
      ::openstack::xml::DailyBackup::H_1400_1600,
      ::openstack::xml::DailyBackup::H_1600_1800,
      ::openstack::xml::DailyBackup::H_1800_2000,
      ::openstack::xml::DailyBackup::H_2000_2200,
      ::openstack::xml::DailyBackup::H_2200_0000
    };

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, DailyBackup >
    _xsd_DailyBackup_type_factory_init (
      "DailyBackup",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // WeeklyBackup
    //

    WeeklyBackup::
    WeeklyBackup (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::String (e, f, c)
    {
      _xsd_WeeklyBackup_convert ();
    }

    WeeklyBackup::
    WeeklyBackup (const ::xercesc::DOMAttr& a,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::String (a, f, c)
    {
      _xsd_WeeklyBackup_convert ();
    }

    WeeklyBackup::
    WeeklyBackup (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::String (s, e, f, c)
    {
      _xsd_WeeklyBackup_convert ();
    }

    WeeklyBackup* WeeklyBackup::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class WeeklyBackup (*this, f, c);
    }

    WeeklyBackup::Value WeeklyBackup::
    _xsd_WeeklyBackup_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_WeeklyBackup_literals_);
      const Value* i (::std::lower_bound (
                        _xsd_WeeklyBackup_indexes_,
                        _xsd_WeeklyBackup_indexes_ + 9,
                        *this,
                        c));

      if (i == _xsd_WeeklyBackup_indexes_ + 9 || _xsd_WeeklyBackup_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const WeeklyBackup::
    _xsd_WeeklyBackup_literals_[9] =
    {
      "DISABLED",
      "SUNDAY",
      "MONDAY",
      "TUESDAY",
      "WEDNESDAY",
      "THURSDAY",
      "FRIDAY",
      "SATURDAY",
      "SUNDAY"
    };

    const WeeklyBackup::Value WeeklyBackup::
    _xsd_WeeklyBackup_indexes_[9] =
    {
      ::openstack::xml::WeeklyBackup::DISABLED,
      ::openstack::xml::WeeklyBackup::FRIDAY,
      ::openstack::xml::WeeklyBackup::MONDAY,
      ::openstack::xml::WeeklyBackup::SATURDAY,
      ::openstack::xml::WeeklyBackup::SUNDAY,
      ::openstack::xml::WeeklyBackup::SUNDAY1,
      ::openstack::xml::WeeklyBackup::THURSDAY,
      ::openstack::xml::WeeklyBackup::TUESDAY,
      ::openstack::xml::WeeklyBackup::WEDNESDAY
    };

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, WeeklyBackup >
    _xsd_WeeklyBackup_type_factory_init (
      "WeeklyBackup",
      "http://docs.rackspacecloud.com/servers/api/v1.0");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace openstack
{
  namespace xml
  {
    ::std::auto_ptr< ::openstack::xml::BackupSchedule >
    backupSchedule (const ::std::string& u,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::BackupSchedule > r (
        ::openstack::xml::backupSchedule (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BackupSchedule >
    backupSchedule (const ::std::string& u,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BackupSchedule > r (
        ::openstack::xml::backupSchedule (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BackupSchedule >
    backupSchedule (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BackupSchedule > r (
        ::openstack::xml::backupSchedule (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BackupSchedule >
    backupSchedule (::std::istream& is,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::backupSchedule (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BackupSchedule >
    backupSchedule (::std::istream& is,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::backupSchedule (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BackupSchedule >
    backupSchedule (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::backupSchedule (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BackupSchedule >
    backupSchedule (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::backupSchedule (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BackupSchedule >
    backupSchedule (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::backupSchedule (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BackupSchedule >
    backupSchedule (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::backupSchedule (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BackupSchedule >
    backupSchedule (::xercesc::InputSource& i,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::BackupSchedule > r (
        ::openstack::xml::backupSchedule (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BackupSchedule >
    backupSchedule (::xercesc::InputSource& i,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BackupSchedule > r (
        ::openstack::xml::backupSchedule (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BackupSchedule >
    backupSchedule (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BackupSchedule > r (
        ::openstack::xml::backupSchedule (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BackupSchedule >
    backupSchedule (const ::xercesc::DOMDocument& d,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::BackupSchedule > r (
          ::openstack::xml::backupSchedule (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "backupSchedule",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::BackupSchedule >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::BackupSchedule > r (
          dynamic_cast< ::openstack::xml::BackupSchedule* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "backupSchedule",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::BackupSchedule >
    backupSchedule (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "backupSchedule",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::BackupSchedule >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::BackupSchedule > r (
          dynamic_cast< ::openstack::xml::BackupSchedule* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "backupSchedule",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

