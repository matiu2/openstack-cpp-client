// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XSDS_LIMITS_IPP
#define XSDS_LIMITS_IPP

// Begin prologue.
//
//
// End prologue.

namespace openstack
{
  namespace xml
  {
    // Limits_
    // 

    inline
    const Limits_::ValueType& Limits_::
    value () const
    {
      return this->value_.get ();
    }

    inline
    Limits_::ValueType& Limits_::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void Limits_::
    value (const ValueType& x)
    {
      return this->value_.set (x);
    }

    inline
    void Limits_::
    value (::std::auto_ptr< ValueType > p)
    {
      return this->value_.set (p);
    }

    // Limits
    // 

    inline
    const Limits::RateType& Limits::
    rate () const
    {
      return this->rate_.get ();
    }

    inline
    Limits::RateType& Limits::
    rate ()
    {
      return this->rate_.get ();
    }

    inline
    void Limits::
    rate (const RateType& x)
    {
      this->rate_.set (x);
    }

    inline
    void Limits::
    rate (::std::auto_ptr< RateType > x)
    {
      this->rate_.set (x);
    }

    inline
    const Limits::AbsoluteType& Limits::
    absolute () const
    {
      return this->absolute_.get ();
    }

    inline
    Limits::AbsoluteType& Limits::
    absolute ()
    {
      return this->absolute_.get ();
    }

    inline
    void Limits::
    absolute (const AbsoluteType& x)
    {
      this->absolute_.set (x);
    }

    inline
    void Limits::
    absolute (::std::auto_ptr< AbsoluteType > x)
    {
      this->absolute_.set (x);
    }


    // RateLimits
    // 

    inline
    const RateLimits::LimitSequence& RateLimits::
    limit () const
    {
      return this->limit_;
    }

    inline
    RateLimits::LimitSequence& RateLimits::
    limit ()
    {
      return this->limit_;
    }

    inline
    void RateLimits::
    limit (const LimitSequence& s)
    {
      this->limit_ = s;
    }


    // AbsoluteLimits
    // 

    inline
    const AbsoluteLimits::LimitSequence& AbsoluteLimits::
    limit () const
    {
      return this->limit_;
    }

    inline
    AbsoluteLimits::LimitSequence& AbsoluteLimits::
    limit ()
    {
      return this->limit_;
    }

    inline
    void AbsoluteLimits::
    limit (const LimitSequence& s)
    {
      this->limit_ = s;
    }


    // RateLimit
    // 

    inline
    const RateLimit::VerbType& RateLimit::
    verb () const
    {
      return this->verb_.get ();
    }

    inline
    RateLimit::VerbType& RateLimit::
    verb ()
    {
      return this->verb_.get ();
    }

    inline
    void RateLimit::
    verb (const VerbType& x)
    {
      this->verb_.set (x);
    }

    inline
    void RateLimit::
    verb (::std::auto_ptr< VerbType > x)
    {
      this->verb_.set (x);
    }

    inline
    const RateLimit::URIType& RateLimit::
    uRI () const
    {
      return this->URI_.get ();
    }

    inline
    RateLimit::URIType& RateLimit::
    uRI ()
    {
      return this->URI_.get ();
    }

    inline
    void RateLimit::
    uRI (const URIType& x)
    {
      this->URI_.set (x);
    }

    inline
    void RateLimit::
    uRI (::std::auto_ptr< URIType > x)
    {
      this->URI_.set (x);
    }

    inline
    const RateLimit::RegexType& RateLimit::
    regex () const
    {
      return this->regex_.get ();
    }

    inline
    RateLimit::RegexType& RateLimit::
    regex ()
    {
      return this->regex_.get ();
    }

    inline
    void RateLimit::
    regex (const RegexType& x)
    {
      this->regex_.set (x);
    }

    inline
    void RateLimit::
    regex (::std::auto_ptr< RegexType > x)
    {
      this->regex_.set (x);
    }

    inline
    const RateLimit::UnitType& RateLimit::
    unit () const
    {
      return this->unit_.get ();
    }

    inline
    RateLimit::UnitType& RateLimit::
    unit ()
    {
      return this->unit_.get ();
    }

    inline
    void RateLimit::
    unit (const UnitType& x)
    {
      this->unit_.set (x);
    }

    inline
    void RateLimit::
    unit (::std::auto_ptr< UnitType > x)
    {
      this->unit_.set (x);
    }

    inline
    const RateLimit::ValueType& RateLimit::
    value () const
    {
      return this->value_.get ();
    }

    inline
    RateLimit::ValueType& RateLimit::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void RateLimit::
    value (const ValueType& x)
    {
      this->value_.set (x);
    }

    inline
    const RateLimit::RemainingType& RateLimit::
    remaining () const
    {
      return this->remaining_.get ();
    }

    inline
    RateLimit::RemainingType& RateLimit::
    remaining ()
    {
      return this->remaining_.get ();
    }

    inline
    void RateLimit::
    remaining (const RemainingType& x)
    {
      this->remaining_.set (x);
    }

    inline
    const RateLimit::ResetTimeType& RateLimit::
    resetTime () const
    {
      return this->resetTime_.get ();
    }

    inline
    RateLimit::ResetTimeType& RateLimit::
    resetTime ()
    {
      return this->resetTime_.get ();
    }

    inline
    void RateLimit::
    resetTime (const ResetTimeType& x)
    {
      this->resetTime_.set (x);
    }


    // AbsoluteLimit
    // 

    inline
    const AbsoluteLimit::NameType& AbsoluteLimit::
    name () const
    {
      return this->name_.get ();
    }

    inline
    AbsoluteLimit::NameType& AbsoluteLimit::
    name ()
    {
      return this->name_.get ();
    }

    inline
    void AbsoluteLimit::
    name (const NameType& x)
    {
      this->name_.set (x);
    }

    inline
    void AbsoluteLimit::
    name (::std::auto_ptr< NameType > x)
    {
      this->name_.set (x);
    }

    inline
    const AbsoluteLimit::ValueType& AbsoluteLimit::
    value () const
    {
      return this->value_.get ();
    }

    inline
    AbsoluteLimit::ValueType& AbsoluteLimit::
    value ()
    {
      return this->value_.get ();
    }

    inline
    void AbsoluteLimit::
    value (const ValueType& x)
    {
      this->value_.set (x);
    }


    // HTTPVerb
    // 

    inline
    HTTPVerb::
    HTTPVerb (Value v)
    : ::xml_schema::String (_xsd_HTTPVerb_literals_[v])
    {
    }

    inline
    HTTPVerb::
    HTTPVerb (const char* v)
    : ::xml_schema::String (v)
    {
    }

    inline
    HTTPVerb::
    HTTPVerb (const ::std::string& v)
    : ::xml_schema::String (v)
    {
    }

    inline
    HTTPVerb::
    HTTPVerb (const ::xml_schema::String& v)
    : ::xml_schema::String (v)
    {
    }

    inline
    HTTPVerb::
    HTTPVerb (const HTTPVerb& v,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
    : ::xml_schema::String (v, f, c)
    {
    }

    inline
    HTTPVerb& HTTPVerb::
    operator= (Value v)
    {
      static_cast< ::xml_schema::String& > (*this) = 
      ::xml_schema::String (_xsd_HTTPVerb_literals_[v]);

      return *this;
    }


    // RateLimitUnit
    // 

    inline
    RateLimitUnit::
    RateLimitUnit (Value v)
    : ::xml_schema::String (_xsd_RateLimitUnit_literals_[v])
    {
    }

    inline
    RateLimitUnit::
    RateLimitUnit (const char* v)
    : ::xml_schema::String (v)
    {
    }

    inline
    RateLimitUnit::
    RateLimitUnit (const ::std::string& v)
    : ::xml_schema::String (v)
    {
    }

    inline
    RateLimitUnit::
    RateLimitUnit (const ::xml_schema::String& v)
    : ::xml_schema::String (v)
    {
    }

    inline
    RateLimitUnit::
    RateLimitUnit (const RateLimitUnit& v,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::String (v, f, c)
    {
    }

    inline
    RateLimitUnit& RateLimitUnit::
    operator= (Value v)
    {
      static_cast< ::xml_schema::String& > (*this) = 
      ::xml_schema::String (_xsd_RateLimitUnit_literals_[v]);

      return *this;
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // XSDS_LIMITS_IPP
