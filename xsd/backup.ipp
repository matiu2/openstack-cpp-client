// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XSDS_BACKUP_IPP
#define XSDS_BACKUP_IPP

// Begin prologue.
//
//
// End prologue.

namespace openstack
{
  namespace xml
  {
    // BackupSchedule
    // 

    inline
    const BackupSchedule::EnabledType& BackupSchedule::
    enabled () const
    {
      return this->enabled_.get ();
    }

    inline
    BackupSchedule::EnabledType& BackupSchedule::
    enabled ()
    {
      return this->enabled_.get ();
    }

    inline
    void BackupSchedule::
    enabled (const EnabledType& x)
    {
      this->enabled_.set (x);
    }

    inline
    const BackupSchedule::WeeklyType& BackupSchedule::
    weekly () const
    {
      return this->weekly_.get ();
    }

    inline
    BackupSchedule::WeeklyType& BackupSchedule::
    weekly ()
    {
      return this->weekly_.get ();
    }

    inline
    void BackupSchedule::
    weekly (const WeeklyType& x)
    {
      this->weekly_.set (x);
    }

    inline
    void BackupSchedule::
    weekly (::std::auto_ptr< WeeklyType > x)
    {
      this->weekly_.set (x);
    }

    inline
    const BackupSchedule::DailyType& BackupSchedule::
    daily () const
    {
      return this->daily_.get ();
    }

    inline
    BackupSchedule::DailyType& BackupSchedule::
    daily ()
    {
      return this->daily_.get ();
    }

    inline
    void BackupSchedule::
    daily (const DailyType& x)
    {
      this->daily_.set (x);
    }

    inline
    void BackupSchedule::
    daily (::std::auto_ptr< DailyType > x)
    {
      this->daily_.set (x);
    }


    // DailyBackup
    // 

    inline
    DailyBackup::
    DailyBackup (Value v)
    : ::xml_schema::String (_xsd_DailyBackup_literals_[v])
    {
    }

    inline
    DailyBackup::
    DailyBackup (const char* v)
    : ::xml_schema::String (v)
    {
    }

    inline
    DailyBackup::
    DailyBackup (const ::std::string& v)
    : ::xml_schema::String (v)
    {
    }

    inline
    DailyBackup::
    DailyBackup (const ::xml_schema::String& v)
    : ::xml_schema::String (v)
    {
    }

    inline
    DailyBackup::
    DailyBackup (const DailyBackup& v,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::String (v, f, c)
    {
    }

    inline
    DailyBackup& DailyBackup::
    operator= (Value v)
    {
      static_cast< ::xml_schema::String& > (*this) = 
      ::xml_schema::String (_xsd_DailyBackup_literals_[v]);

      return *this;
    }


    // WeeklyBackup
    // 

    inline
    WeeklyBackup::
    WeeklyBackup (Value v)
    : ::xml_schema::String (_xsd_WeeklyBackup_literals_[v])
    {
    }

    inline
    WeeklyBackup::
    WeeklyBackup (const char* v)
    : ::xml_schema::String (v)
    {
    }

    inline
    WeeklyBackup::
    WeeklyBackup (const ::std::string& v)
    : ::xml_schema::String (v)
    {
    }

    inline
    WeeklyBackup::
    WeeklyBackup (const ::xml_schema::String& v)
    : ::xml_schema::String (v)
    {
    }

    inline
    WeeklyBackup::
    WeeklyBackup (const WeeklyBackup& v,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::String (v, f, c)
    {
    }

    inline
    WeeklyBackup& WeeklyBackup::
    operator= (Value v)
    {
      static_cast< ::xml_schema::String& > (*this) = 
      ::xml_schema::String (_xsd_WeeklyBackup_literals_[v]);

      return *this;
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // XSDS_BACKUP_IPP
