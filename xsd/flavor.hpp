// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from flavor.xsd.
 */

#ifndef XSDS_FLAVOR_HPP
#define XSDS_FLAVOR_HPP

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/element-map.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>
#include <xsd/cxx/tree/parsing/element-map.txx>

/**
 * @brief C++ namespace for the %http://www.w3.org/2001/XMLSchema
 * schema namespace.
 */
namespace xml_schema
{
  // anyType and anySimpleType.
  //

  /**
   * @brief C++ type corresponding to the anyType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::type Type;

  /**
   * @brief C++ type corresponding to the anySimpleType XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::simple_type< Type > SimpleType;

  /**
   * @brief Alias for the anyType type.
   */
  typedef ::xsd::cxx::tree::type Container;


  // 8-bit
  //

  /**
   * @brief C++ type corresponding to the byte XML Schema
   * built-in type.
   */
  typedef signed char Byte;

  /**
   * @brief C++ type corresponding to the unsignedByte XML Schema
   * built-in type.
   */
  typedef unsigned char UnsignedByte;


  // 16-bit
  //

  /**
   * @brief C++ type corresponding to the short XML Schema
   * built-in type.
   */
  typedef short Short;

  /**
   * @brief C++ type corresponding to the unsignedShort XML Schema
   * built-in type.
   */
  typedef unsigned short UnsignedShort;


  // 32-bit
  //

  /**
   * @brief C++ type corresponding to the int XML Schema
   * built-in type.
   */
  typedef int Int;

  /**
   * @brief C++ type corresponding to the unsignedInt XML Schema
   * built-in type.
   */
  typedef unsigned int UnsignedInt;


  // 64-bit
  //

  /**
   * @brief C++ type corresponding to the long XML Schema
   * built-in type.
   */
  typedef long long Long;

  /**
   * @brief C++ type corresponding to the unsignedLong XML Schema
   * built-in type.
   */
  typedef unsigned long long UnsignedLong;


  // Supposed to be arbitrary-length integral types.
  //

  /**
   * @brief C++ type corresponding to the integer XML Schema
   * built-in type.
   */
  typedef long long Integer;

  /**
   * @brief C++ type corresponding to the nonPositiveInteger XML Schema
   * built-in type.
   */
  typedef long long NonPositiveInteger;

  /**
   * @brief C++ type corresponding to the nonNegativeInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long NonNegativeInteger;

  /**
   * @brief C++ type corresponding to the positiveInteger XML Schema
   * built-in type.
   */
  typedef unsigned long long PositiveInteger;

  /**
   * @brief C++ type corresponding to the negativeInteger XML Schema
   * built-in type.
   */
  typedef long long NegativeInteger;


  // Boolean.
  //

  /**
   * @brief C++ type corresponding to the boolean XML Schema
   * built-in type.
   */
  typedef bool Boolean;


  // Floating-point types.
  //

  /**
   * @brief C++ type corresponding to the float XML Schema
   * built-in type.
   */
  typedef float Float;

  /**
   * @brief C++ type corresponding to the double XML Schema
   * built-in type.
   */
  typedef double Double;

  /**
   * @brief C++ type corresponding to the decimal XML Schema
   * built-in type.
   */
  typedef double Decimal;


  // String types.
  //

  /**
   * @brief C++ type corresponding to the string XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::string< char, SimpleType > String;

  /**
   * @brief C++ type corresponding to the normalizedString XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::normalized_string< char, String > NormalizedString;

  /**
   * @brief C++ type corresponding to the token XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::token< char, NormalizedString > Token;

  /**
   * @brief C++ type corresponding to the Name XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::name< char, Token > Name;

  /**
   * @brief C++ type corresponding to the NMTOKEN XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtoken< char, Token > Nmtoken;

  /**
   * @brief C++ type corresponding to the NMTOKENS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::nmtokens< char, SimpleType, Nmtoken > Nmtokens;

  /**
   * @brief C++ type corresponding to the NCName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::ncname< char, Name > Ncname;

  /**
   * @brief C++ type corresponding to the language XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::language< char, Token > Language;


  // ID/IDREF.
  //

  /**
   * @brief C++ type corresponding to the ID XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::id< char, Ncname > Id;

  /**
   * @brief C++ type corresponding to the IDREF XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idref< char, Ncname, Type > Idref;

  /**
   * @brief C++ type corresponding to the IDREFS XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::idrefs< char, SimpleType, Idref > Idrefs;


  // URI.
  //

  /**
   * @brief C++ type corresponding to the anyURI XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::uri< char, SimpleType > Uri;


  // Qualified name.
  //

  /**
   * @brief C++ type corresponding to the QName XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::qname< char, SimpleType, Uri, Ncname > Qname;


  // Binary.
  //

  /**
   * @brief Binary buffer type.
   */
  typedef ::xsd::cxx::tree::buffer< char > Buffer;

  /**
   * @brief C++ type corresponding to the base64Binary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::base64_binary< char, SimpleType > Base64Binary;

  /**
   * @brief C++ type corresponding to the hexBinary XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::hex_binary< char, SimpleType > HexBinary;


  // Date/time.
  //

  /**
   * @brief Time zone type.
   */
  typedef ::xsd::cxx::tree::time_zone TimeZone;

  /**
   * @brief C++ type corresponding to the date XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date< char, SimpleType > Date;

  /**
   * @brief C++ type corresponding to the dateTime XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::date_time< char, SimpleType > DateTime;

  /**
   * @brief C++ type corresponding to the duration XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::duration< char, SimpleType > Duration;

  /**
   * @brief C++ type corresponding to the gDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gday< char, SimpleType > Gday;

  /**
   * @brief C++ type corresponding to the gMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth< char, SimpleType > Gmonth;

  /**
   * @brief C++ type corresponding to the gMonthDay XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gmonth_day< char, SimpleType > GmonthDay;

  /**
   * @brief C++ type corresponding to the gYear XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear< char, SimpleType > Gyear;

  /**
   * @brief C++ type corresponding to the gYearMonth XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::gyear_month< char, SimpleType > GyearMonth;

  /**
   * @brief C++ type corresponding to the time XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::time< char, SimpleType > Time;


  // Entity.
  //

  /**
   * @brief C++ type corresponding to the ENTITY XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entity< char, Ncname > Entity;

  /**
   * @brief C++ type corresponding to the ENTITIES XML Schema
   * built-in type.
   */
  typedef ::xsd::cxx::tree::entities< char, SimpleType, Entity > Entities;


  /**
   * @brief Base class for element types.
   */
  typedef ::xsd::cxx::tree::element_type< char, Type > ElementType;

  /**
   * @brief Root element map.
   */
  typedef ::xsd::cxx::tree::element_map< char, Type > ElementMap;

  // Flags and properties.
  //

  /**
   * @brief Parsing and serialization flags.
   */
  typedef ::xsd::cxx::tree::flags Flags;

  /**
   * @brief Parsing properties.
   */
  typedef ::xsd::cxx::tree::properties< char > Properties;

  // Parsing/serialization diagnostics.
  //

  /**
   * @brief Error severity.
   */
  typedef ::xsd::cxx::tree::severity Severity;

  /**
   * @brief Error condition.
   */
  typedef ::xsd::cxx::tree::error< char > Error;

  /**
   * @brief List of %error conditions.
   */
  typedef ::xsd::cxx::tree::diagnostics< char > Diagnostics;

  // Exceptions.
  //

  /**
   * @brief Root of the C++/Tree %exception hierarchy.
   */
  typedef ::xsd::cxx::tree::exception< char > Exception;

  /**
   * @brief Exception indicating that the size argument exceeds
   * the capacity argument.
   */
  typedef ::xsd::cxx::tree::bounds< char > Bounds;

  /**
   * @brief Exception indicating that a duplicate ID value
   * was encountered in the object model.
   */
  typedef ::xsd::cxx::tree::duplicate_id< char > DuplicateId;

  /**
   * @brief Exception indicating a parsing failure.
   */
  typedef ::xsd::cxx::tree::parsing< char > Parsing;

  /**
   * @brief Exception indicating that an expected element
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_element< char > ExpectedElement;

  /**
   * @brief Exception indicating that an unexpected element
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_element< char > UnexpectedElement;

  /**
   * @brief Exception indicating that an expected attribute
   * was not encountered.
   */
  typedef ::xsd::cxx::tree::expected_attribute< char > ExpectedAttribute;

  /**
   * @brief Exception indicating that an unexpected enumerator
   * was encountered.
   */
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > UnexpectedEnumerator;

  /**
   * @brief Exception indicating that the text content was
   * expected for an element.
   */
  typedef ::xsd::cxx::tree::expected_text_content< char > ExpectedTextContent;

  /**
   * @brief Exception indicating that a prefix-namespace
   * mapping was not provided.
   */
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > NoPrefixMapping;

  /**
   * @brief Exception indicating that the type information
   * is not available for a type.
   */
  typedef ::xsd::cxx::tree::no_type_info< char > NoTypeInfo;

  /**
   * @brief Exception indicating that the types are not
   * related by inheritance.
   */
  typedef ::xsd::cxx::tree::not_derived< char > NotDerived;

  /**
   * @brief Exception indicating that parsing or serialization
   * information is not available for an element.
   */
  typedef ::xsd::cxx::tree::no_element_info< char > NoElementInfo;

  /**
   * @brief Error handler callback interface.
   */
  typedef ::xsd::cxx::xml::error_handler< char > ErrorHandler;

  /**
   * @brief DOM interaction.
   */
  namespace dom
  {
    /**
     * @brief Automatic pointer for DOMDocument.
     */
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    /**
     * @brief DOM user data key for back pointers to tree nodes.
     */
    const XMLCh* const treeNodeKey = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }

  //@cond

#ifndef XSD_CXX_TREE_ELEMENT_MAP_INIT__XML_SCHEMA
#define XSD_CXX_TREE_ELEMENT_MAP_INIT__XML_SCHEMA
  static
  const ::xsd::cxx::tree::element_map_init< char, Type >
  _xsd_element_map_init;
#endif

  //@endcond
}

// Forward declarations.
//
namespace openstack
{
  namespace xml
  {
    class Flavor;
    class Flavors;
  }
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#ifndef XSD_DONT_INCLUDE_INLINE
#define XSD_DONT_INCLUDE_INLINE

#undef XSD_DONT_INCLUDE_INLINE
#else

#endif // XSD_DONT_INCLUDE_INLINE

namespace openstack
{
  /**
   * @brief C++ namespace for the %http://docs.rackspacecloud.com/servers/api/v1.0
   * schema namespace.
   */
  namespace xml
  {
    /**
     * @brief Class corresponding to the %flavor root element.
     *
     * @nosubgrouping
     */
    class Flavor_: public ::xml_schema::ElementType
    {
      public:

      /**
       * @name Element value
       *
       * @brief Accessor and modifier functions for the element value.
       */
      //@{

      /**
       * @brief Element value type.
       */
      typedef ::openstack::xml::Flavor ValueType;

      /**
       * @brief Element value traits type.
       */
      typedef ::xsd::cxx::tree::traits< ValueType, char > ValueTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * value.
       *
       * @return A constant reference to the element value.
       */
      const ValueType&
      value () const;

      /**
       * @brief Return a read-write reference to the element value.
       *
       * @return A reference to the element value.
       */
      ValueType&
      value ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      value (const ValueType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      value (::std::auto_ptr< ValueType > p);

      /**
       * @brief Return a read-only (constant) pointer to the element
       * value.
       *
       * @return A constant pointer to the element value or 0 if this
       * element is of a fundamental type.
       */
      virtual const ::xml_schema::Type*
      _value () const;

      /**
       * @brief Return a pointer to the element value.
       *
       * @return A pointer to the element value or 0 if this element is
       * of a fundamental type.
       */
      virtual ::xml_schema::Type*
      _value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from an initializer for the element
       * value.
       *
       * @param x Element value.
       */
      Flavor_ (const ValueType& x);

      /**
       * @brief Create an instance from an initializer for
       * the element value (auto_ptr version).
       *
       * @param p Element value to use.
       *
       * This constructor will try to use the passed value directly
       * instead of making a copy.
       */
      Flavor_ (::std::auto_ptr< ValueType > p);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       */
      Flavor_ (const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Flavor_ (const Flavor_& x, ::xml_schema::Flags f = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Flavor_*
      _clone (::xml_schema::Flags f = 0) const;

      //@}

      /**
       * @name Element name and namespace
       *
       * @brief Accessor functions for the element name and namespace.
       */
      //@{

      /**
       * @brief Return the element name (static function).
       *
       * @return A read-only string reference containing the element
       * name.
       */
      static const ::std::string&
      name ();

      /**
       * @brief Return the element namespace (static function).
       *
       * @return A read-only string reference containing the element
       * namespace.
       */
      static const ::std::string&
      namespace_ ();

      /**
       * @brief Return the element name.
       *
       * @return A read-only string reference containing the element
       * name.
       */
      virtual const ::std::string&
      _name () const;

      /**
       * @brief Return the element namespace.
       *
       * @return A read-only string reference containing the element
       * namespace.
       */
      virtual const ::std::string&
      _namespace () const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~Flavor_ ();

      //@cond

      protected:
      ::xsd::cxx::tree::one< ValueType > value_;
      static const ::std::string name_;
      static const ::std::string namespace__;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %flavors root element.
     *
     * @nosubgrouping
     */
    class Flavors_: public ::xml_schema::ElementType
    {
      public:

      /**
       * @name Element value
       *
       * @brief Accessor and modifier functions for the element value.
       */
      //@{

      /**
       * @brief Element value type.
       */
      typedef ::openstack::xml::Flavors ValueType;

      /**
       * @brief Element value traits type.
       */
      typedef ::xsd::cxx::tree::traits< ValueType, char > ValueTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * value.
       *
       * @return A constant reference to the element value.
       */
      const ValueType&
      value () const;

      /**
       * @brief Return a read-write reference to the element value.
       *
       * @return A reference to the element value.
       */
      ValueType&
      value ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      value (const ValueType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      value (::std::auto_ptr< ValueType > p);

      /**
       * @brief Return a read-only (constant) pointer to the element
       * value.
       *
       * @return A constant pointer to the element value or 0 if this
       * element is of a fundamental type.
       */
      virtual const ::xml_schema::Type*
      _value () const;

      /**
       * @brief Return a pointer to the element value.
       *
       * @return A pointer to the element value or 0 if this element is
       * of a fundamental type.
       */
      virtual ::xml_schema::Type*
      _value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from an initializer for the element
       * value.
       *
       * @param x Element value.
       */
      Flavors_ (const ValueType& x);

      /**
       * @brief Create an instance from an initializer for
       * the element value (auto_ptr version).
       *
       * @param p Element value to use.
       *
       * This constructor will try to use the passed value directly
       * instead of making a copy.
       */
      Flavors_ (::std::auto_ptr< ValueType > p);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       */
      Flavors_ (const ::xercesc::DOMElement& e, ::xml_schema::Flags f = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Flavors_ (const Flavors_& x, ::xml_schema::Flags f = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Flavors_*
      _clone (::xml_schema::Flags f = 0) const;

      //@}

      /**
       * @name Element name and namespace
       *
       * @brief Accessor functions for the element name and namespace.
       */
      //@{

      /**
       * @brief Return the element name (static function).
       *
       * @return A read-only string reference containing the element
       * name.
       */
      static const ::std::string&
      name ();

      /**
       * @brief Return the element namespace (static function).
       *
       * @return A read-only string reference containing the element
       * namespace.
       */
      static const ::std::string&
      namespace_ ();

      /**
       * @brief Return the element name.
       *
       * @return A read-only string reference containing the element
       * name.
       */
      virtual const ::std::string&
      _name () const;

      /**
       * @brief Return the element namespace.
       *
       * @return A read-only string reference containing the element
       * namespace.
       */
      virtual const ::std::string&
      _namespace () const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~Flavors_ ();

      //@cond

      protected:
      ::xsd::cxx::tree::one< ValueType > value_;
      static const ::std::string name_;
      static const ::std::string namespace__;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %Flavor schema type.
     *
     * @nosubgrouping
     */
    class Flavor: public ::xml_schema::Type
    {
      public:
      /**
       * @name id
       *
       * @brief Accessor and modifier functions for the %id
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Int IdType;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const IdType&
      id () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      IdType&
      id ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      id (const IdType& x);

      //@}

      /**
       * @name name
       *
       * @brief Accessor and modifier functions for the %name
       * required attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::String NameType;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute.
       *
       * @return A constant reference to the attribute.
       */
      const NameType&
      name () const;

      /**
       * @brief Return a read-write reference to the attribute.
       *
       * @return A reference to the attribute.
       */
      NameType&
      name ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      name (const NameType& x);

      /**
       * @brief Set the attribute value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      name (::std::auto_ptr< NameType > p);

      //@}

      /**
       * @name ram
       *
       * @brief Accessor and modifier functions for the %ram
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Int RamType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< RamType > RamOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< RamType, char > RamTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const RamOptional&
      ram () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      RamOptional&
      ram ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      ram (const RamType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      ram (const RamOptional& x);

      //@}

      /**
       * @name disk
       *
       * @brief Accessor and modifier functions for the %disk
       * optional attribute.
       */
      //@{

      /**
       * @brief Attribute type.
       */
      typedef ::xml_schema::Int DiskType;

      /**
       * @brief Attribute optional container type.
       */
      typedef ::xsd::cxx::tree::optional< DiskType > DiskOptional;

      /**
       * @brief Attribute traits type.
       */
      typedef ::xsd::cxx::tree::traits< DiskType, char > DiskTraits;

      /**
       * @brief Return a read-only (constant) reference to the attribute
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const DiskOptional&
      disk () const;

      /**
       * @brief Return a read-write reference to the attribute container.
       *
       * @return A reference to the optional container.
       */
      DiskOptional&
      disk ();

      /**
       * @brief Set the attribute value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the attribute.
       */
      void
      disk (const DiskType& x);

      /**
       * @brief Set the attribute value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the attribute.
       * Otherwise the attribute container is set the 'not present' state.
       */
      void
      disk (const DiskOptional& x);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      Flavor (const IdType&,
              const NameType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      Flavor (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Flavor (const Flavor& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Flavor*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~Flavor ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< IdType > id_;
      ::xsd::cxx::tree::one< NameType > name_;
      RamOptional ram_;
      DiskOptional disk_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %Flavors schema type.
     *
     * @nosubgrouping
     */
    class Flavors: public ::xml_schema::Type
    {
      public:
      /**
       * @name flavor
       *
       * @brief Accessor and modifier functions for the %flavor
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::openstack::xml::Flavor FlavorType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< FlavorType > FlavorSequence;

      /**
       * @brief Element iterator type.
       */
      typedef FlavorSequence::iterator FlavorIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef FlavorSequence::const_iterator FlavorConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< FlavorType, char > FlavorTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const FlavorSequence&
      flavor () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      FlavorSequence&
      flavor ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      flavor (const FlavorSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      Flavors ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      Flavors (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Flavors (const Flavors& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Flavors*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~Flavors ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      FlavorSequence flavor_;

      //@endcond
    };
  }
}

#ifndef XSD_DONT_INCLUDE_INLINE

#endif // XSD_DONT_INCLUDE_INLINE

#ifndef XSD_DONT_INCLUDE_INLINE
#include "flavor.ipp"
#endif // XSD_DONT_INCLUDE_INLINE

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XSDS_FLAVOR_HPP
