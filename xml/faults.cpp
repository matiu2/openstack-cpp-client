// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "faults.hpp"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace openstack
{
  namespace xml
  {
    // CloudServersAPIFault
    //

    CloudServersAPIFault::
    CloudServersAPIFault (const MessageType& message,
                          const CodeType& code)
    : ::xml_schema::Type (),
      message_ (message, ::xml_schema::Flags (), this),
      details_ (::xml_schema::Flags (), this),
      code_ (code, ::xml_schema::Flags (), this)
    {
    }

    CloudServersAPIFault::
    CloudServersAPIFault (::std::auto_ptr< MessageType >& message,
                          const CodeType& code)
    : ::xml_schema::Type (),
      message_ (message, ::xml_schema::Flags (), this),
      details_ (::xml_schema::Flags (), this),
      code_ (code, ::xml_schema::Flags (), this)
    {
    }

    CloudServersAPIFault::
    CloudServersAPIFault (const CloudServersAPIFault& x,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      message_ (x.message_, f, this),
      details_ (x.details_, f, this),
      code_ (x.code_, f, this)
    {
    }

    CloudServersAPIFault::
    CloudServersAPIFault (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      message_ (f, this),
      details_ (f, this),
      code_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void CloudServersAPIFault::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // message
        //
        {
          ::xsd::cxx::tree::type_factory_map< char >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              "message",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              &::xsd::cxx::tree::factory_impl< MessageType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!message_.present ())
            {
              ::std::auto_ptr< MessageType > r (
                dynamic_cast< MessageType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->message_.set (r);
              continue;
            }
          }
        }

        // details
        //
        {
          ::xsd::cxx::tree::type_factory_map< char >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              "details",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              &::xsd::cxx::tree::factory_impl< DetailsType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->details_)
            {
              ::std::auto_ptr< DetailsType > r (
                dynamic_cast< DetailsType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->details_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!message_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "message",
          "http://docs.rackspacecloud.com/servers/api/v1.0");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "code" && n.namespace_ ().empty ())
        {
          this->code_.set (CodeTraits::create (i, f, this));
          continue;
        }
      }

      if (!code_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "code",
          "");
      }
    }

    CloudServersAPIFault* CloudServersAPIFault::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class CloudServersAPIFault (*this, f, c);
    }

    CloudServersAPIFault::
    ~CloudServersAPIFault ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, CloudServersAPIFault >
    _xsd_CloudServersAPIFault_type_factory_init (
      "CloudServersAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // ItemNotFoundAPIFault
    //

    ItemNotFoundAPIFault::
    ItemNotFoundAPIFault (const MessageType& message,
                          const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    ItemNotFoundAPIFault::
    ItemNotFoundAPIFault (::std::auto_ptr< MessageType >& message,
                          const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    ItemNotFoundAPIFault::
    ItemNotFoundAPIFault (const ItemNotFoundAPIFault& x,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (x, f, c)
    {
    }

    ItemNotFoundAPIFault::
    ItemNotFoundAPIFault (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (e, f, c)
    {
    }

    ItemNotFoundAPIFault* ItemNotFoundAPIFault::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ItemNotFoundAPIFault (*this, f, c);
    }

    ItemNotFoundAPIFault::
    ~ItemNotFoundAPIFault ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ItemNotFoundAPIFault >
    _xsd_ItemNotFoundAPIFault_type_factory_init (
      "ItemNotFoundAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // BuildInProgressAPIFault
    //

    BuildInProgressAPIFault::
    BuildInProgressAPIFault (const MessageType& message,
                             const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    BuildInProgressAPIFault::
    BuildInProgressAPIFault (::std::auto_ptr< MessageType >& message,
                             const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    BuildInProgressAPIFault::
    BuildInProgressAPIFault (const BuildInProgressAPIFault& x,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (x, f, c)
    {
    }

    BuildInProgressAPIFault::
    BuildInProgressAPIFault (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f,
                             ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (e, f, c)
    {
    }

    BuildInProgressAPIFault* BuildInProgressAPIFault::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class BuildInProgressAPIFault (*this, f, c);
    }

    BuildInProgressAPIFault::
    ~BuildInProgressAPIFault ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, BuildInProgressAPIFault >
    _xsd_BuildInProgressAPIFault_type_factory_init (
      "BuildInProgressAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // ServerCapacityUnavailableAPIFault
    //

    ServerCapacityUnavailableAPIFault::
    ServerCapacityUnavailableAPIFault (const MessageType& message,
                                       const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    ServerCapacityUnavailableAPIFault::
    ServerCapacityUnavailableAPIFault (::std::auto_ptr< MessageType >& message,
                                       const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    ServerCapacityUnavailableAPIFault::
    ServerCapacityUnavailableAPIFault (const ServerCapacityUnavailableAPIFault& x,
                                       ::xml_schema::Flags f,
                                       ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (x, f, c)
    {
    }

    ServerCapacityUnavailableAPIFault::
    ServerCapacityUnavailableAPIFault (const ::xercesc::DOMElement& e,
                                       ::xml_schema::Flags f,
                                       ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (e, f, c)
    {
    }

    ServerCapacityUnavailableAPIFault* ServerCapacityUnavailableAPIFault::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ServerCapacityUnavailableAPIFault (*this, f, c);
    }

    ServerCapacityUnavailableAPIFault::
    ~ServerCapacityUnavailableAPIFault ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ServerCapacityUnavailableAPIFault >
    _xsd_ServerCapacityUnavailableAPIFault_type_factory_init (
      "ServerCapacityUnavailableAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // BackupOrResizeInProgressAPIFault
    //

    BackupOrResizeInProgressAPIFault::
    BackupOrResizeInProgressAPIFault (const MessageType& message,
                                      const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    BackupOrResizeInProgressAPIFault::
    BackupOrResizeInProgressAPIFault (::std::auto_ptr< MessageType >& message,
                                      const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    BackupOrResizeInProgressAPIFault::
    BackupOrResizeInProgressAPIFault (const BackupOrResizeInProgressAPIFault& x,
                                      ::xml_schema::Flags f,
                                      ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (x, f, c)
    {
    }

    BackupOrResizeInProgressAPIFault::
    BackupOrResizeInProgressAPIFault (const ::xercesc::DOMElement& e,
                                      ::xml_schema::Flags f,
                                      ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (e, f, c)
    {
    }

    BackupOrResizeInProgressAPIFault* BackupOrResizeInProgressAPIFault::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class BackupOrResizeInProgressAPIFault (*this, f, c);
    }

    BackupOrResizeInProgressAPIFault::
    ~BackupOrResizeInProgressAPIFault ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, BackupOrResizeInProgressAPIFault >
    _xsd_BackupOrResizeInProgressAPIFault_type_factory_init (
      "BackupOrResizeInProgressAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // ResizeNotAllowedAPIFault
    //

    ResizeNotAllowedAPIFault::
    ResizeNotAllowedAPIFault (const MessageType& message,
                              const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    ResizeNotAllowedAPIFault::
    ResizeNotAllowedAPIFault (::std::auto_ptr< MessageType >& message,
                              const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    ResizeNotAllowedAPIFault::
    ResizeNotAllowedAPIFault (const ResizeNotAllowedAPIFault& x,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (x, f, c)
    {
    }

    ResizeNotAllowedAPIFault::
    ResizeNotAllowedAPIFault (const ::xercesc::DOMElement& e,
                              ::xml_schema::Flags f,
                              ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (e, f, c)
    {
    }

    ResizeNotAllowedAPIFault* ResizeNotAllowedAPIFault::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ResizeNotAllowedAPIFault (*this, f, c);
    }

    ResizeNotAllowedAPIFault::
    ~ResizeNotAllowedAPIFault ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ResizeNotAllowedAPIFault >
    _xsd_ResizeNotAllowedAPIFault_type_factory_init (
      "ResizeNotAllowedAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // ServiceUnavailableAPIFault
    //

    ServiceUnavailableAPIFault::
    ServiceUnavailableAPIFault (const MessageType& message,
                                const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    ServiceUnavailableAPIFault::
    ServiceUnavailableAPIFault (::std::auto_ptr< MessageType >& message,
                                const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    ServiceUnavailableAPIFault::
    ServiceUnavailableAPIFault (const ServiceUnavailableAPIFault& x,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (x, f, c)
    {
    }

    ServiceUnavailableAPIFault::
    ServiceUnavailableAPIFault (const ::xercesc::DOMElement& e,
                                ::xml_schema::Flags f,
                                ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (e, f, c)
    {
    }

    ServiceUnavailableAPIFault* ServiceUnavailableAPIFault::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ServiceUnavailableAPIFault (*this, f, c);
    }

    ServiceUnavailableAPIFault::
    ~ServiceUnavailableAPIFault ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ServiceUnavailableAPIFault >
    _xsd_ServiceUnavailableAPIFault_type_factory_init (
      "ServiceUnavailableAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // UnauthorizedAPIFault
    //

    UnauthorizedAPIFault::
    UnauthorizedAPIFault (const MessageType& message,
                          const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    UnauthorizedAPIFault::
    UnauthorizedAPIFault (::std::auto_ptr< MessageType >& message,
                          const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    UnauthorizedAPIFault::
    UnauthorizedAPIFault (const UnauthorizedAPIFault& x,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (x, f, c)
    {
    }

    UnauthorizedAPIFault::
    UnauthorizedAPIFault (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (e, f, c)
    {
    }

    UnauthorizedAPIFault* UnauthorizedAPIFault::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class UnauthorizedAPIFault (*this, f, c);
    }

    UnauthorizedAPIFault::
    ~UnauthorizedAPIFault ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, UnauthorizedAPIFault >
    _xsd_UnauthorizedAPIFault_type_factory_init (
      "UnauthorizedAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // OverLimitAPIFault
    //

    OverLimitAPIFault::
    OverLimitAPIFault (const MessageType& message,
                       const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code),
      retryAfter_ (::xml_schema::Flags (), this)
    {
    }

    OverLimitAPIFault::
    OverLimitAPIFault (::std::auto_ptr< MessageType >& message,
                       const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code),
      retryAfter_ (::xml_schema::Flags (), this)
    {
    }

    OverLimitAPIFault::
    OverLimitAPIFault (const OverLimitAPIFault& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (x, f, c),
      retryAfter_ (x.retryAfter_, f, this)
    {
    }

    OverLimitAPIFault::
    OverLimitAPIFault (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (e, f | ::xml_schema::Flags::base, c),
      retryAfter_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void OverLimitAPIFault::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      this->::openstack::xml::CloudServersAPIFault::parse (p, f);

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "retryAfter" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< RetryAfterType > r (
            RetryAfterTraits::create (i, f, this));

          this->retryAfter_.set (r);
          continue;
        }
      }
    }

    OverLimitAPIFault* OverLimitAPIFault::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class OverLimitAPIFault (*this, f, c);
    }

    OverLimitAPIFault::
    ~OverLimitAPIFault ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, OverLimitAPIFault >
    _xsd_OverLimitAPIFault_type_factory_init (
      "OverLimitAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // BadRequestAPIFault
    //

    BadRequestAPIFault::
    BadRequestAPIFault (const MessageType& message,
                        const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    BadRequestAPIFault::
    BadRequestAPIFault (::std::auto_ptr< MessageType >& message,
                        const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    BadRequestAPIFault::
    BadRequestAPIFault (const BadRequestAPIFault& x,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (x, f, c)
    {
    }

    BadRequestAPIFault::
    BadRequestAPIFault (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (e, f, c)
    {
    }

    BadRequestAPIFault* BadRequestAPIFault::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class BadRequestAPIFault (*this, f, c);
    }

    BadRequestAPIFault::
    ~BadRequestAPIFault ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, BadRequestAPIFault >
    _xsd_BadRequestAPIFault_type_factory_init (
      "BadRequestAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // BadMediaTypeAPIFault
    //

    BadMediaTypeAPIFault::
    BadMediaTypeAPIFault (const MessageType& message,
                          const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    BadMediaTypeAPIFault::
    BadMediaTypeAPIFault (::std::auto_ptr< MessageType >& message,
                          const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    BadMediaTypeAPIFault::
    BadMediaTypeAPIFault (const BadMediaTypeAPIFault& x,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (x, f, c)
    {
    }

    BadMediaTypeAPIFault::
    BadMediaTypeAPIFault (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f,
                          ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (e, f, c)
    {
    }

    BadMediaTypeAPIFault* BadMediaTypeAPIFault::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class BadMediaTypeAPIFault (*this, f, c);
    }

    BadMediaTypeAPIFault::
    ~BadMediaTypeAPIFault ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, BadMediaTypeAPIFault >
    _xsd_BadMediaTypeAPIFault_type_factory_init (
      "BadMediaTypeAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // BadMethodAPIFault
    //

    BadMethodAPIFault::
    BadMethodAPIFault (const MessageType& message,
                       const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    BadMethodAPIFault::
    BadMethodAPIFault (::std::auto_ptr< MessageType >& message,
                       const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    BadMethodAPIFault::
    BadMethodAPIFault (const BadMethodAPIFault& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (x, f, c)
    {
    }

    BadMethodAPIFault::
    BadMethodAPIFault (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (e, f, c)
    {
    }

    BadMethodAPIFault* BadMethodAPIFault::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class BadMethodAPIFault (*this, f, c);
    }

    BadMethodAPIFault::
    ~BadMethodAPIFault ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, BadMethodAPIFault >
    _xsd_BadMethodAPIFault_type_factory_init (
      "BadMethodAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // NotImplementedAPIFault
    //

    NotImplementedAPIFault::
    NotImplementedAPIFault (const MessageType& message,
                            const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    NotImplementedAPIFault::
    NotImplementedAPIFault (::std::auto_ptr< MessageType >& message,
                            const CodeType& code)
    : ::openstack::xml::CloudServersAPIFault (message,
                                              code)
    {
    }

    NotImplementedAPIFault::
    NotImplementedAPIFault (const NotImplementedAPIFault& x,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (x, f, c)
    {
    }

    NotImplementedAPIFault::
    NotImplementedAPIFault (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
    : ::openstack::xml::CloudServersAPIFault (e, f, c)
    {
    }

    NotImplementedAPIFault* NotImplementedAPIFault::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class NotImplementedAPIFault (*this, f, c);
    }

    NotImplementedAPIFault::
    ~NotImplementedAPIFault ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, NotImplementedAPIFault >
    _xsd_NotImplementedAPIFault_type_factory_init (
      "NotImplementedAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace openstack
{
  namespace xml
  {
    ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault >
    cloudServersFault (const ::std::string& u,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault > r (
        ::openstack::xml::cloudServersFault (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault >
    cloudServersFault (const ::std::string& u,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault > r (
        ::openstack::xml::cloudServersFault (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault >
    cloudServersFault (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault > r (
        ::openstack::xml::cloudServersFault (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault >
    cloudServersFault (::std::istream& is,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::cloudServersFault (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault >
    cloudServersFault (::std::istream& is,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::cloudServersFault (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault >
    cloudServersFault (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::cloudServersFault (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault >
    cloudServersFault (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::cloudServersFault (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault >
    cloudServersFault (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::cloudServersFault (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault >
    cloudServersFault (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::cloudServersFault (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault >
    cloudServersFault (::xercesc::InputSource& i,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault > r (
        ::openstack::xml::cloudServersFault (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault >
    cloudServersFault (::xercesc::InputSource& i,
                       ::xml_schema::ErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault > r (
        ::openstack::xml::cloudServersFault (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault >
    cloudServersFault (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault > r (
        ::openstack::xml::cloudServersFault (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault >
    cloudServersFault (const ::xercesc::DOMDocument& d,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault > r (
          ::openstack::xml::cloudServersFault (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "cloudServersFault",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::CloudServersAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault > r (
          dynamic_cast< ::openstack::xml::CloudServersAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "cloudServersFault",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault >
    cloudServersFault (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::Flags f,
                       const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "cloudServersFault",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::CloudServersAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::CloudServersAPIFault > r (
          dynamic_cast< ::openstack::xml::CloudServersAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "cloudServersFault",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault >
    itemNotFound (const ::std::string& u,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault > r (
        ::openstack::xml::itemNotFound (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault >
    itemNotFound (const ::std::string& u,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault > r (
        ::openstack::xml::itemNotFound (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault >
    itemNotFound (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault > r (
        ::openstack::xml::itemNotFound (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault >
    itemNotFound (::std::istream& is,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::itemNotFound (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault >
    itemNotFound (::std::istream& is,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::itemNotFound (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault >
    itemNotFound (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::itemNotFound (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault >
    itemNotFound (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::itemNotFound (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault >
    itemNotFound (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::itemNotFound (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault >
    itemNotFound (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::itemNotFound (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault >
    itemNotFound (::xercesc::InputSource& i,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault > r (
        ::openstack::xml::itemNotFound (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault >
    itemNotFound (::xercesc::InputSource& i,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault > r (
        ::openstack::xml::itemNotFound (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault >
    itemNotFound (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault > r (
        ::openstack::xml::itemNotFound (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault >
    itemNotFound (const ::xercesc::DOMDocument& d,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault > r (
          ::openstack::xml::itemNotFound (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "itemNotFound",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::ItemNotFoundAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault > r (
          dynamic_cast< ::openstack::xml::ItemNotFoundAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "itemNotFound",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault >
    itemNotFound (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "itemNotFound",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::ItemNotFoundAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::ItemNotFoundAPIFault > r (
          dynamic_cast< ::openstack::xml::ItemNotFoundAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "itemNotFound",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault >
    buildInProgress (const ::std::string& u,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault > r (
        ::openstack::xml::buildInProgress (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault >
    buildInProgress (const ::std::string& u,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault > r (
        ::openstack::xml::buildInProgress (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault >
    buildInProgress (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault > r (
        ::openstack::xml::buildInProgress (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault >
    buildInProgress (::std::istream& is,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::buildInProgress (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault >
    buildInProgress (::std::istream& is,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::buildInProgress (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault >
    buildInProgress (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::buildInProgress (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault >
    buildInProgress (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::buildInProgress (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault >
    buildInProgress (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::buildInProgress (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault >
    buildInProgress (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::buildInProgress (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault >
    buildInProgress (::xercesc::InputSource& i,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault > r (
        ::openstack::xml::buildInProgress (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault >
    buildInProgress (::xercesc::InputSource& i,
                     ::xml_schema::ErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault > r (
        ::openstack::xml::buildInProgress (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault >
    buildInProgress (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault > r (
        ::openstack::xml::buildInProgress (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault >
    buildInProgress (const ::xercesc::DOMDocument& d,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault > r (
          ::openstack::xml::buildInProgress (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "buildInProgress",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::BuildInProgressAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault > r (
          dynamic_cast< ::openstack::xml::BuildInProgressAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "buildInProgress",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault >
    buildInProgress (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::Flags f,
                     const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "buildInProgress",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::BuildInProgressAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::BuildInProgressAPIFault > r (
          dynamic_cast< ::openstack::xml::BuildInProgressAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "buildInProgress",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault >
    serverCapacityUnavailable (const ::std::string& u,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault > r (
        ::openstack::xml::serverCapacityUnavailable (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault >
    serverCapacityUnavailable (const ::std::string& u,
                               ::xml_schema::ErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault > r (
        ::openstack::xml::serverCapacityUnavailable (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault >
    serverCapacityUnavailable (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault > r (
        ::openstack::xml::serverCapacityUnavailable (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault >
    serverCapacityUnavailable (::std::istream& is,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::serverCapacityUnavailable (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault >
    serverCapacityUnavailable (::std::istream& is,
                               ::xml_schema::ErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::serverCapacityUnavailable (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault >
    serverCapacityUnavailable (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::serverCapacityUnavailable (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault >
    serverCapacityUnavailable (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::serverCapacityUnavailable (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault >
    serverCapacityUnavailable (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::ErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::serverCapacityUnavailable (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault >
    serverCapacityUnavailable (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::serverCapacityUnavailable (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault >
    serverCapacityUnavailable (::xercesc::InputSource& i,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault > r (
        ::openstack::xml::serverCapacityUnavailable (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault >
    serverCapacityUnavailable (::xercesc::InputSource& i,
                               ::xml_schema::ErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault > r (
        ::openstack::xml::serverCapacityUnavailable (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault >
    serverCapacityUnavailable (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault > r (
        ::openstack::xml::serverCapacityUnavailable (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault >
    serverCapacityUnavailable (const ::xercesc::DOMDocument& d,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault > r (
          ::openstack::xml::serverCapacityUnavailable (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "serverCapacityUnavailable",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::ServerCapacityUnavailableAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault > r (
          dynamic_cast< ::openstack::xml::ServerCapacityUnavailableAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "serverCapacityUnavailable",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault >
    serverCapacityUnavailable (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::Flags f,
                               const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "serverCapacityUnavailable",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::ServerCapacityUnavailableAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::ServerCapacityUnavailableAPIFault > r (
          dynamic_cast< ::openstack::xml::ServerCapacityUnavailableAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "serverCapacityUnavailable",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault >
    backupOrResizeInProgress (const ::std::string& u,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault > r (
        ::openstack::xml::backupOrResizeInProgress (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault >
    backupOrResizeInProgress (const ::std::string& u,
                              ::xml_schema::ErrorHandler& h,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault > r (
        ::openstack::xml::backupOrResizeInProgress (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault >
    backupOrResizeInProgress (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault > r (
        ::openstack::xml::backupOrResizeInProgress (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault >
    backupOrResizeInProgress (::std::istream& is,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::backupOrResizeInProgress (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault >
    backupOrResizeInProgress (::std::istream& is,
                              ::xml_schema::ErrorHandler& h,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::backupOrResizeInProgress (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault >
    backupOrResizeInProgress (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::backupOrResizeInProgress (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault >
    backupOrResizeInProgress (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::backupOrResizeInProgress (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault >
    backupOrResizeInProgress (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::ErrorHandler& h,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::backupOrResizeInProgress (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault >
    backupOrResizeInProgress (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::backupOrResizeInProgress (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault >
    backupOrResizeInProgress (::xercesc::InputSource& i,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault > r (
        ::openstack::xml::backupOrResizeInProgress (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault >
    backupOrResizeInProgress (::xercesc::InputSource& i,
                              ::xml_schema::ErrorHandler& h,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault > r (
        ::openstack::xml::backupOrResizeInProgress (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault >
    backupOrResizeInProgress (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault > r (
        ::openstack::xml::backupOrResizeInProgress (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault >
    backupOrResizeInProgress (const ::xercesc::DOMDocument& d,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault > r (
          ::openstack::xml::backupOrResizeInProgress (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "backupOrResizeInProgress",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::BackupOrResizeInProgressAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault > r (
          dynamic_cast< ::openstack::xml::BackupOrResizeInProgressAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "backupOrResizeInProgress",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault >
    backupOrResizeInProgress (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::Flags f,
                              const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "backupOrResizeInProgress",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::BackupOrResizeInProgressAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::BackupOrResizeInProgressAPIFault > r (
          dynamic_cast< ::openstack::xml::BackupOrResizeInProgressAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "backupOrResizeInProgress",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault >
    resizeNotAllowed (const ::std::string& u,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault > r (
        ::openstack::xml::resizeNotAllowed (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault >
    resizeNotAllowed (const ::std::string& u,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault > r (
        ::openstack::xml::resizeNotAllowed (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault >
    resizeNotAllowed (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault > r (
        ::openstack::xml::resizeNotAllowed (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault >
    resizeNotAllowed (::std::istream& is,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::resizeNotAllowed (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault >
    resizeNotAllowed (::std::istream& is,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::resizeNotAllowed (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault >
    resizeNotAllowed (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::resizeNotAllowed (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault >
    resizeNotAllowed (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::resizeNotAllowed (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault >
    resizeNotAllowed (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::resizeNotAllowed (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault >
    resizeNotAllowed (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::resizeNotAllowed (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault >
    resizeNotAllowed (::xercesc::InputSource& i,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault > r (
        ::openstack::xml::resizeNotAllowed (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault >
    resizeNotAllowed (::xercesc::InputSource& i,
                      ::xml_schema::ErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault > r (
        ::openstack::xml::resizeNotAllowed (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault >
    resizeNotAllowed (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault > r (
        ::openstack::xml::resizeNotAllowed (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault >
    resizeNotAllowed (const ::xercesc::DOMDocument& d,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault > r (
          ::openstack::xml::resizeNotAllowed (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "resizeNotAllowed",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::ResizeNotAllowedAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault > r (
          dynamic_cast< ::openstack::xml::ResizeNotAllowedAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "resizeNotAllowed",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault >
    resizeNotAllowed (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::Flags f,
                      const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "resizeNotAllowed",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::ResizeNotAllowedAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::ResizeNotAllowedAPIFault > r (
          dynamic_cast< ::openstack::xml::ResizeNotAllowedAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "resizeNotAllowed",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault >
    serviceUnavailable (const ::std::string& u,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault > r (
        ::openstack::xml::serviceUnavailable (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault >
    serviceUnavailable (const ::std::string& u,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault > r (
        ::openstack::xml::serviceUnavailable (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault >
    serviceUnavailable (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault > r (
        ::openstack::xml::serviceUnavailable (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault >
    serviceUnavailable (::std::istream& is,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::serviceUnavailable (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault >
    serviceUnavailable (::std::istream& is,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::serviceUnavailable (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault >
    serviceUnavailable (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::serviceUnavailable (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault >
    serviceUnavailable (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::serviceUnavailable (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault >
    serviceUnavailable (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::serviceUnavailable (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault >
    serviceUnavailable (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::serviceUnavailable (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault >
    serviceUnavailable (::xercesc::InputSource& i,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault > r (
        ::openstack::xml::serviceUnavailable (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault >
    serviceUnavailable (::xercesc::InputSource& i,
                        ::xml_schema::ErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault > r (
        ::openstack::xml::serviceUnavailable (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault >
    serviceUnavailable (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault > r (
        ::openstack::xml::serviceUnavailable (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault >
    serviceUnavailable (const ::xercesc::DOMDocument& d,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault > r (
          ::openstack::xml::serviceUnavailable (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "serviceUnavailable",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::ServiceUnavailableAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault > r (
          dynamic_cast< ::openstack::xml::ServiceUnavailableAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "serviceUnavailable",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault >
    serviceUnavailable (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::Flags f,
                        const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "serviceUnavailable",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::ServiceUnavailableAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::ServiceUnavailableAPIFault > r (
          dynamic_cast< ::openstack::xml::ServiceUnavailableAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "serviceUnavailable",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault >
    unauthorized (const ::std::string& u,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault > r (
        ::openstack::xml::unauthorized (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault >
    unauthorized (const ::std::string& u,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault > r (
        ::openstack::xml::unauthorized (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault >
    unauthorized (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault > r (
        ::openstack::xml::unauthorized (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault >
    unauthorized (::std::istream& is,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::unauthorized (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault >
    unauthorized (::std::istream& is,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::unauthorized (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault >
    unauthorized (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::unauthorized (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault >
    unauthorized (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::unauthorized (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault >
    unauthorized (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::unauthorized (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault >
    unauthorized (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::unauthorized (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault >
    unauthorized (::xercesc::InputSource& i,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault > r (
        ::openstack::xml::unauthorized (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault >
    unauthorized (::xercesc::InputSource& i,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault > r (
        ::openstack::xml::unauthorized (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault >
    unauthorized (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault > r (
        ::openstack::xml::unauthorized (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault >
    unauthorized (const ::xercesc::DOMDocument& d,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault > r (
          ::openstack::xml::unauthorized (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "unauthorized",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::UnauthorizedAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault > r (
          dynamic_cast< ::openstack::xml::UnauthorizedAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "unauthorized",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault >
    unauthorized (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "unauthorized",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::UnauthorizedAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::UnauthorizedAPIFault > r (
          dynamic_cast< ::openstack::xml::UnauthorizedAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "unauthorized",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault >
    overLimit (const ::std::string& u,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault > r (
        ::openstack::xml::overLimit (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault >
    overLimit (const ::std::string& u,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault > r (
        ::openstack::xml::overLimit (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault >
    overLimit (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault > r (
        ::openstack::xml::overLimit (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault >
    overLimit (::std::istream& is,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::overLimit (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault >
    overLimit (::std::istream& is,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::overLimit (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault >
    overLimit (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::overLimit (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault >
    overLimit (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::overLimit (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault >
    overLimit (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::overLimit (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault >
    overLimit (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::overLimit (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault >
    overLimit (::xercesc::InputSource& i,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault > r (
        ::openstack::xml::overLimit (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault >
    overLimit (::xercesc::InputSource& i,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault > r (
        ::openstack::xml::overLimit (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault >
    overLimit (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault > r (
        ::openstack::xml::overLimit (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault >
    overLimit (const ::xercesc::DOMDocument& d,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault > r (
          ::openstack::xml::overLimit (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "overLimit",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::OverLimitAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault > r (
          dynamic_cast< ::openstack::xml::OverLimitAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "overLimit",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault >
    overLimit (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "overLimit",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::OverLimitAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::OverLimitAPIFault > r (
          dynamic_cast< ::openstack::xml::OverLimitAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "overLimit",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault >
    badRequest (const ::std::string& u,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault > r (
        ::openstack::xml::badRequest (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault >
    badRequest (const ::std::string& u,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault > r (
        ::openstack::xml::badRequest (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault >
    badRequest (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault > r (
        ::openstack::xml::badRequest (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault >
    badRequest (::std::istream& is,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::badRequest (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault >
    badRequest (::std::istream& is,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::badRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault >
    badRequest (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::badRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault >
    badRequest (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::badRequest (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault >
    badRequest (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::badRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault >
    badRequest (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::badRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault >
    badRequest (::xercesc::InputSource& i,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault > r (
        ::openstack::xml::badRequest (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault >
    badRequest (::xercesc::InputSource& i,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault > r (
        ::openstack::xml::badRequest (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault >
    badRequest (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault > r (
        ::openstack::xml::badRequest (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault >
    badRequest (const ::xercesc::DOMDocument& d,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault > r (
          ::openstack::xml::badRequest (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "badRequest",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::BadRequestAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault > r (
          dynamic_cast< ::openstack::xml::BadRequestAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "badRequest",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault >
    badRequest (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "badRequest",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::BadRequestAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::BadRequestAPIFault > r (
          dynamic_cast< ::openstack::xml::BadRequestAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "badRequest",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault >
    badMediaType (const ::std::string& u,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault > r (
        ::openstack::xml::badMediaType (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault >
    badMediaType (const ::std::string& u,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault > r (
        ::openstack::xml::badMediaType (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault >
    badMediaType (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault > r (
        ::openstack::xml::badMediaType (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault >
    badMediaType (::std::istream& is,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::badMediaType (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault >
    badMediaType (::std::istream& is,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::badMediaType (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault >
    badMediaType (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::badMediaType (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault >
    badMediaType (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::badMediaType (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault >
    badMediaType (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::badMediaType (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault >
    badMediaType (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::badMediaType (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault >
    badMediaType (::xercesc::InputSource& i,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault > r (
        ::openstack::xml::badMediaType (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault >
    badMediaType (::xercesc::InputSource& i,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault > r (
        ::openstack::xml::badMediaType (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault >
    badMediaType (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault > r (
        ::openstack::xml::badMediaType (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault >
    badMediaType (const ::xercesc::DOMDocument& d,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault > r (
          ::openstack::xml::badMediaType (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "badMediaType",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::BadMediaTypeAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault > r (
          dynamic_cast< ::openstack::xml::BadMediaTypeAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "badMediaType",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault >
    badMediaType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "badMediaType",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::BadMediaTypeAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::BadMediaTypeAPIFault > r (
          dynamic_cast< ::openstack::xml::BadMediaTypeAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "badMediaType",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault >
    badMethod (const ::std::string& u,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault > r (
        ::openstack::xml::badMethod (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault >
    badMethod (const ::std::string& u,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault > r (
        ::openstack::xml::badMethod (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault >
    badMethod (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault > r (
        ::openstack::xml::badMethod (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault >
    badMethod (::std::istream& is,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::badMethod (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault >
    badMethod (::std::istream& is,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::badMethod (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault >
    badMethod (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::badMethod (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault >
    badMethod (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::badMethod (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault >
    badMethod (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::badMethod (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault >
    badMethod (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::badMethod (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault >
    badMethod (::xercesc::InputSource& i,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault > r (
        ::openstack::xml::badMethod (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault >
    badMethod (::xercesc::InputSource& i,
               ::xml_schema::ErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault > r (
        ::openstack::xml::badMethod (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault >
    badMethod (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault > r (
        ::openstack::xml::badMethod (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault >
    badMethod (const ::xercesc::DOMDocument& d,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault > r (
          ::openstack::xml::badMethod (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "badMethod",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::BadMethodAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault > r (
          dynamic_cast< ::openstack::xml::BadMethodAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "badMethod",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault >
    badMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::Flags f,
               const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "badMethod",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::BadMethodAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::BadMethodAPIFault > r (
          dynamic_cast< ::openstack::xml::BadMethodAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "badMethod",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault >
    notImplemented (const ::std::string& u,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault > r (
        ::openstack::xml::notImplemented (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault >
    notImplemented (const ::std::string& u,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault > r (
        ::openstack::xml::notImplemented (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault >
    notImplemented (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault > r (
        ::openstack::xml::notImplemented (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault >
    notImplemented (::std::istream& is,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::notImplemented (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault >
    notImplemented (::std::istream& is,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::notImplemented (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault >
    notImplemented (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::notImplemented (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault >
    notImplemented (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::notImplemented (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault >
    notImplemented (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::notImplemented (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault >
    notImplemented (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::notImplemented (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault >
    notImplemented (::xercesc::InputSource& i,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault > r (
        ::openstack::xml::notImplemented (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault >
    notImplemented (::xercesc::InputSource& i,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault > r (
        ::openstack::xml::notImplemented (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault >
    notImplemented (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault > r (
        ::openstack::xml::notImplemented (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault >
    notImplemented (const ::xercesc::DOMDocument& d,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault > r (
          ::openstack::xml::notImplemented (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "notImplemented",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::NotImplementedAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault > r (
          dynamic_cast< ::openstack::xml::NotImplementedAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "notImplemented",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault >
    notImplemented (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "notImplemented",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::NotImplementedAPIFault >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::NotImplementedAPIFault > r (
          dynamic_cast< ::openstack::xml::NotImplementedAPIFault* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "notImplemented",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace openstack
{
  namespace xml
  {
    void
    cloudServersFault (::std::ostream& o,
                       const ::openstack::xml::CloudServersAPIFault& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::cloudServersFault (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    cloudServersFault (::std::ostream& o,
                       const ::openstack::xml::CloudServersAPIFault& s,
                       ::xml_schema::ErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::cloudServersFault (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    cloudServersFault (::std::ostream& o,
                       const ::openstack::xml::CloudServersAPIFault& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::cloudServersFault (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    cloudServersFault (::xercesc::XMLFormatTarget& t,
                       const ::openstack::xml::CloudServersAPIFault& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::cloudServersFault (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    cloudServersFault (::xercesc::XMLFormatTarget& t,
                       const ::openstack::xml::CloudServersAPIFault& s,
                       ::xml_schema::ErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::cloudServersFault (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    cloudServersFault (::xercesc::XMLFormatTarget& t,
                       const ::openstack::xml::CloudServersAPIFault& s,
                       ::xercesc::DOMErrorHandler& h,
                       const ::xml_schema::NamespaceInfomap& m,
                       const ::std::string& e,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::cloudServersFault (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    cloudServersFault (::xercesc::DOMDocument& d,
                       const ::openstack::xml::CloudServersAPIFault& s,
                       ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::CloudServersAPIFault) == typeid (s))
      {
        if (n.name () == "cloudServersFault" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "cloudServersFault",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "cloudServersFault",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    cloudServersFault (const ::openstack::xml::CloudServersAPIFault& s,
                       const ::xml_schema::NamespaceInfomap& m,
                       ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::CloudServersAPIFault) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "cloudServersFault",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "cloudServersFault",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::cloudServersFault (*d, s, f);
      return d;
    }

    void
    itemNotFound (::std::ostream& o,
                  const ::openstack::xml::ItemNotFoundAPIFault& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::itemNotFound (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    itemNotFound (::std::ostream& o,
                  const ::openstack::xml::ItemNotFoundAPIFault& s,
                  ::xml_schema::ErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::itemNotFound (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    itemNotFound (::std::ostream& o,
                  const ::openstack::xml::ItemNotFoundAPIFault& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::itemNotFound (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    itemNotFound (::xercesc::XMLFormatTarget& t,
                  const ::openstack::xml::ItemNotFoundAPIFault& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::itemNotFound (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    itemNotFound (::xercesc::XMLFormatTarget& t,
                  const ::openstack::xml::ItemNotFoundAPIFault& s,
                  ::xml_schema::ErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::itemNotFound (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    itemNotFound (::xercesc::XMLFormatTarget& t,
                  const ::openstack::xml::ItemNotFoundAPIFault& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::itemNotFound (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    itemNotFound (::xercesc::DOMDocument& d,
                  const ::openstack::xml::ItemNotFoundAPIFault& s,
                  ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::ItemNotFoundAPIFault) == typeid (s))
      {
        if (n.name () == "itemNotFound" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "itemNotFound",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "itemNotFound",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    itemNotFound (const ::openstack::xml::ItemNotFoundAPIFault& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::ItemNotFoundAPIFault) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "itemNotFound",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "itemNotFound",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::itemNotFound (*d, s, f);
      return d;
    }

    void
    buildInProgress (::std::ostream& o,
                     const ::openstack::xml::BuildInProgressAPIFault& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::buildInProgress (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    buildInProgress (::std::ostream& o,
                     const ::openstack::xml::BuildInProgressAPIFault& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::buildInProgress (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    buildInProgress (::std::ostream& o,
                     const ::openstack::xml::BuildInProgressAPIFault& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::buildInProgress (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    buildInProgress (::xercesc::XMLFormatTarget& t,
                     const ::openstack::xml::BuildInProgressAPIFault& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::buildInProgress (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    buildInProgress (::xercesc::XMLFormatTarget& t,
                     const ::openstack::xml::BuildInProgressAPIFault& s,
                     ::xml_schema::ErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::buildInProgress (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    buildInProgress (::xercesc::XMLFormatTarget& t,
                     const ::openstack::xml::BuildInProgressAPIFault& s,
                     ::xercesc::DOMErrorHandler& h,
                     const ::xml_schema::NamespaceInfomap& m,
                     const ::std::string& e,
                     ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::buildInProgress (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    buildInProgress (::xercesc::DOMDocument& d,
                     const ::openstack::xml::BuildInProgressAPIFault& s,
                     ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::BuildInProgressAPIFault) == typeid (s))
      {
        if (n.name () == "buildInProgress" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "buildInProgress",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "buildInProgress",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    buildInProgress (const ::openstack::xml::BuildInProgressAPIFault& s,
                     const ::xml_schema::NamespaceInfomap& m,
                     ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::BuildInProgressAPIFault) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "buildInProgress",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "buildInProgress",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::buildInProgress (*d, s, f);
      return d;
    }

    void
    serverCapacityUnavailable (::std::ostream& o,
                               const ::openstack::xml::ServerCapacityUnavailableAPIFault& s,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::serverCapacityUnavailable (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serverCapacityUnavailable (::std::ostream& o,
                               const ::openstack::xml::ServerCapacityUnavailableAPIFault& s,
                               ::xml_schema::ErrorHandler& h,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::serverCapacityUnavailable (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serverCapacityUnavailable (::std::ostream& o,
                               const ::openstack::xml::ServerCapacityUnavailableAPIFault& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::serverCapacityUnavailable (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serverCapacityUnavailable (::xercesc::XMLFormatTarget& t,
                               const ::openstack::xml::ServerCapacityUnavailableAPIFault& s,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::serverCapacityUnavailable (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serverCapacityUnavailable (::xercesc::XMLFormatTarget& t,
                               const ::openstack::xml::ServerCapacityUnavailableAPIFault& s,
                               ::xml_schema::ErrorHandler& h,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::serverCapacityUnavailable (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serverCapacityUnavailable (::xercesc::XMLFormatTarget& t,
                               const ::openstack::xml::ServerCapacityUnavailableAPIFault& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::NamespaceInfomap& m,
                               const ::std::string& e,
                               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::serverCapacityUnavailable (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serverCapacityUnavailable (::xercesc::DOMDocument& d,
                               const ::openstack::xml::ServerCapacityUnavailableAPIFault& s,
                               ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::ServerCapacityUnavailableAPIFault) == typeid (s))
      {
        if (n.name () == "serverCapacityUnavailable" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "serverCapacityUnavailable",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "serverCapacityUnavailable",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    serverCapacityUnavailable (const ::openstack::xml::ServerCapacityUnavailableAPIFault& s,
                               const ::xml_schema::NamespaceInfomap& m,
                               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::ServerCapacityUnavailableAPIFault) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "serverCapacityUnavailable",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "serverCapacityUnavailable",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::serverCapacityUnavailable (*d, s, f);
      return d;
    }

    void
    backupOrResizeInProgress (::std::ostream& o,
                              const ::openstack::xml::BackupOrResizeInProgressAPIFault& s,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::backupOrResizeInProgress (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    backupOrResizeInProgress (::std::ostream& o,
                              const ::openstack::xml::BackupOrResizeInProgressAPIFault& s,
                              ::xml_schema::ErrorHandler& h,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::backupOrResizeInProgress (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    backupOrResizeInProgress (::std::ostream& o,
                              const ::openstack::xml::BackupOrResizeInProgressAPIFault& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::backupOrResizeInProgress (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    backupOrResizeInProgress (::xercesc::XMLFormatTarget& t,
                              const ::openstack::xml::BackupOrResizeInProgressAPIFault& s,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::backupOrResizeInProgress (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    backupOrResizeInProgress (::xercesc::XMLFormatTarget& t,
                              const ::openstack::xml::BackupOrResizeInProgressAPIFault& s,
                              ::xml_schema::ErrorHandler& h,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::backupOrResizeInProgress (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    backupOrResizeInProgress (::xercesc::XMLFormatTarget& t,
                              const ::openstack::xml::BackupOrResizeInProgressAPIFault& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::NamespaceInfomap& m,
                              const ::std::string& e,
                              ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::backupOrResizeInProgress (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    backupOrResizeInProgress (::xercesc::DOMDocument& d,
                              const ::openstack::xml::BackupOrResizeInProgressAPIFault& s,
                              ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::BackupOrResizeInProgressAPIFault) == typeid (s))
      {
        if (n.name () == "backupOrResizeInProgress" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "backupOrResizeInProgress",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "backupOrResizeInProgress",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    backupOrResizeInProgress (const ::openstack::xml::BackupOrResizeInProgressAPIFault& s,
                              const ::xml_schema::NamespaceInfomap& m,
                              ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::BackupOrResizeInProgressAPIFault) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "backupOrResizeInProgress",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "backupOrResizeInProgress",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::backupOrResizeInProgress (*d, s, f);
      return d;
    }

    void
    resizeNotAllowed (::std::ostream& o,
                      const ::openstack::xml::ResizeNotAllowedAPIFault& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::resizeNotAllowed (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    resizeNotAllowed (::std::ostream& o,
                      const ::openstack::xml::ResizeNotAllowedAPIFault& s,
                      ::xml_schema::ErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::resizeNotAllowed (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    resizeNotAllowed (::std::ostream& o,
                      const ::openstack::xml::ResizeNotAllowedAPIFault& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::resizeNotAllowed (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    resizeNotAllowed (::xercesc::XMLFormatTarget& t,
                      const ::openstack::xml::ResizeNotAllowedAPIFault& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::resizeNotAllowed (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    resizeNotAllowed (::xercesc::XMLFormatTarget& t,
                      const ::openstack::xml::ResizeNotAllowedAPIFault& s,
                      ::xml_schema::ErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::resizeNotAllowed (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    resizeNotAllowed (::xercesc::XMLFormatTarget& t,
                      const ::openstack::xml::ResizeNotAllowedAPIFault& s,
                      ::xercesc::DOMErrorHandler& h,
                      const ::xml_schema::NamespaceInfomap& m,
                      const ::std::string& e,
                      ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::resizeNotAllowed (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    resizeNotAllowed (::xercesc::DOMDocument& d,
                      const ::openstack::xml::ResizeNotAllowedAPIFault& s,
                      ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::ResizeNotAllowedAPIFault) == typeid (s))
      {
        if (n.name () == "resizeNotAllowed" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "resizeNotAllowed",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "resizeNotAllowed",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    resizeNotAllowed (const ::openstack::xml::ResizeNotAllowedAPIFault& s,
                      const ::xml_schema::NamespaceInfomap& m,
                      ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::ResizeNotAllowedAPIFault) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "resizeNotAllowed",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "resizeNotAllowed",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::resizeNotAllowed (*d, s, f);
      return d;
    }

    void
    serviceUnavailable (::std::ostream& o,
                        const ::openstack::xml::ServiceUnavailableAPIFault& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::serviceUnavailable (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serviceUnavailable (::std::ostream& o,
                        const ::openstack::xml::ServiceUnavailableAPIFault& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::serviceUnavailable (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serviceUnavailable (::std::ostream& o,
                        const ::openstack::xml::ServiceUnavailableAPIFault& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::serviceUnavailable (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serviceUnavailable (::xercesc::XMLFormatTarget& t,
                        const ::openstack::xml::ServiceUnavailableAPIFault& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::serviceUnavailable (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    serviceUnavailable (::xercesc::XMLFormatTarget& t,
                        const ::openstack::xml::ServiceUnavailableAPIFault& s,
                        ::xml_schema::ErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::serviceUnavailable (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serviceUnavailable (::xercesc::XMLFormatTarget& t,
                        const ::openstack::xml::ServiceUnavailableAPIFault& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::NamespaceInfomap& m,
                        const ::std::string& e,
                        ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::serviceUnavailable (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    serviceUnavailable (::xercesc::DOMDocument& d,
                        const ::openstack::xml::ServiceUnavailableAPIFault& s,
                        ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::ServiceUnavailableAPIFault) == typeid (s))
      {
        if (n.name () == "serviceUnavailable" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "serviceUnavailable",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "serviceUnavailable",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    serviceUnavailable (const ::openstack::xml::ServiceUnavailableAPIFault& s,
                        const ::xml_schema::NamespaceInfomap& m,
                        ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::ServiceUnavailableAPIFault) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "serviceUnavailable",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "serviceUnavailable",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::serviceUnavailable (*d, s, f);
      return d;
    }

    void
    unauthorized (::std::ostream& o,
                  const ::openstack::xml::UnauthorizedAPIFault& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::unauthorized (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    unauthorized (::std::ostream& o,
                  const ::openstack::xml::UnauthorizedAPIFault& s,
                  ::xml_schema::ErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::unauthorized (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    unauthorized (::std::ostream& o,
                  const ::openstack::xml::UnauthorizedAPIFault& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::unauthorized (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    unauthorized (::xercesc::XMLFormatTarget& t,
                  const ::openstack::xml::UnauthorizedAPIFault& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::unauthorized (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    unauthorized (::xercesc::XMLFormatTarget& t,
                  const ::openstack::xml::UnauthorizedAPIFault& s,
                  ::xml_schema::ErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::unauthorized (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    unauthorized (::xercesc::XMLFormatTarget& t,
                  const ::openstack::xml::UnauthorizedAPIFault& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::unauthorized (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    unauthorized (::xercesc::DOMDocument& d,
                  const ::openstack::xml::UnauthorizedAPIFault& s,
                  ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::UnauthorizedAPIFault) == typeid (s))
      {
        if (n.name () == "unauthorized" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "unauthorized",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "unauthorized",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    unauthorized (const ::openstack::xml::UnauthorizedAPIFault& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::UnauthorizedAPIFault) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "unauthorized",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "unauthorized",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::unauthorized (*d, s, f);
      return d;
    }

    void
    overLimit (::std::ostream& o,
               const ::openstack::xml::OverLimitAPIFault& s,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::overLimit (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    overLimit (::std::ostream& o,
               const ::openstack::xml::OverLimitAPIFault& s,
               ::xml_schema::ErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::overLimit (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    overLimit (::std::ostream& o,
               const ::openstack::xml::OverLimitAPIFault& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::overLimit (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    overLimit (::xercesc::XMLFormatTarget& t,
               const ::openstack::xml::OverLimitAPIFault& s,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::overLimit (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    overLimit (::xercesc::XMLFormatTarget& t,
               const ::openstack::xml::OverLimitAPIFault& s,
               ::xml_schema::ErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::overLimit (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    overLimit (::xercesc::XMLFormatTarget& t,
               const ::openstack::xml::OverLimitAPIFault& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::overLimit (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    overLimit (::xercesc::DOMDocument& d,
               const ::openstack::xml::OverLimitAPIFault& s,
               ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::OverLimitAPIFault) == typeid (s))
      {
        if (n.name () == "overLimit" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "overLimit",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "overLimit",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    overLimit (const ::openstack::xml::OverLimitAPIFault& s,
               const ::xml_schema::NamespaceInfomap& m,
               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::OverLimitAPIFault) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "overLimit",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "overLimit",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::overLimit (*d, s, f);
      return d;
    }

    void
    badRequest (::std::ostream& o,
                const ::openstack::xml::BadRequestAPIFault& s,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    badRequest (::std::ostream& o,
                const ::openstack::xml::BadRequestAPIFault& s,
                ::xml_schema::ErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    badRequest (::std::ostream& o,
                const ::openstack::xml::BadRequestAPIFault& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    badRequest (::xercesc::XMLFormatTarget& t,
                const ::openstack::xml::BadRequestAPIFault& s,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    badRequest (::xercesc::XMLFormatTarget& t,
                const ::openstack::xml::BadRequestAPIFault& s,
                ::xml_schema::ErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    badRequest (::xercesc::XMLFormatTarget& t,
                const ::openstack::xml::BadRequestAPIFault& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    badRequest (::xercesc::DOMDocument& d,
                const ::openstack::xml::BadRequestAPIFault& s,
                ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::BadRequestAPIFault) == typeid (s))
      {
        if (n.name () == "badRequest" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "badRequest",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "badRequest",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    badRequest (const ::openstack::xml::BadRequestAPIFault& s,
                const ::xml_schema::NamespaceInfomap& m,
                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::BadRequestAPIFault) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "badRequest",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "badRequest",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::badRequest (*d, s, f);
      return d;
    }

    void
    badMediaType (::std::ostream& o,
                  const ::openstack::xml::BadMediaTypeAPIFault& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badMediaType (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    badMediaType (::std::ostream& o,
                  const ::openstack::xml::BadMediaTypeAPIFault& s,
                  ::xml_schema::ErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badMediaType (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    badMediaType (::std::ostream& o,
                  const ::openstack::xml::BadMediaTypeAPIFault& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badMediaType (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    badMediaType (::xercesc::XMLFormatTarget& t,
                  const ::openstack::xml::BadMediaTypeAPIFault& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badMediaType (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    badMediaType (::xercesc::XMLFormatTarget& t,
                  const ::openstack::xml::BadMediaTypeAPIFault& s,
                  ::xml_schema::ErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badMediaType (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    badMediaType (::xercesc::XMLFormatTarget& t,
                  const ::openstack::xml::BadMediaTypeAPIFault& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badMediaType (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    badMediaType (::xercesc::DOMDocument& d,
                  const ::openstack::xml::BadMediaTypeAPIFault& s,
                  ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::BadMediaTypeAPIFault) == typeid (s))
      {
        if (n.name () == "badMediaType" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "badMediaType",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "badMediaType",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    badMediaType (const ::openstack::xml::BadMediaTypeAPIFault& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::BadMediaTypeAPIFault) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "badMediaType",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "badMediaType",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::badMediaType (*d, s, f);
      return d;
    }

    void
    badMethod (::std::ostream& o,
               const ::openstack::xml::BadMethodAPIFault& s,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    badMethod (::std::ostream& o,
               const ::openstack::xml::BadMethodAPIFault& s,
               ::xml_schema::ErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    badMethod (::std::ostream& o,
               const ::openstack::xml::BadMethodAPIFault& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badMethod (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    badMethod (::xercesc::XMLFormatTarget& t,
               const ::openstack::xml::BadMethodAPIFault& s,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badMethod (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    badMethod (::xercesc::XMLFormatTarget& t,
               const ::openstack::xml::BadMethodAPIFault& s,
               ::xml_schema::ErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    badMethod (::xercesc::XMLFormatTarget& t,
               const ::openstack::xml::BadMethodAPIFault& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::NamespaceInfomap& m,
               const ::std::string& e,
               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::badMethod (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    badMethod (::xercesc::DOMDocument& d,
               const ::openstack::xml::BadMethodAPIFault& s,
               ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::BadMethodAPIFault) == typeid (s))
      {
        if (n.name () == "badMethod" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "badMethod",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "badMethod",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    badMethod (const ::openstack::xml::BadMethodAPIFault& s,
               const ::xml_schema::NamespaceInfomap& m,
               ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::BadMethodAPIFault) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "badMethod",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "badMethod",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::badMethod (*d, s, f);
      return d;
    }

    void
    notImplemented (::std::ostream& o,
                    const ::openstack::xml::NotImplementedAPIFault& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::notImplemented (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    notImplemented (::std::ostream& o,
                    const ::openstack::xml::NotImplementedAPIFault& s,
                    ::xml_schema::ErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::notImplemented (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    notImplemented (::std::ostream& o,
                    const ::openstack::xml::NotImplementedAPIFault& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::notImplemented (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    notImplemented (::xercesc::XMLFormatTarget& t,
                    const ::openstack::xml::NotImplementedAPIFault& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::notImplemented (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    notImplemented (::xercesc::XMLFormatTarget& t,
                    const ::openstack::xml::NotImplementedAPIFault& s,
                    ::xml_schema::ErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::notImplemented (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    notImplemented (::xercesc::XMLFormatTarget& t,
                    const ::openstack::xml::NotImplementedAPIFault& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::notImplemented (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    notImplemented (::xercesc::DOMDocument& d,
                    const ::openstack::xml::NotImplementedAPIFault& s,
                    ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::NotImplementedAPIFault) == typeid (s))
      {
        if (n.name () == "notImplemented" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "notImplemented",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "notImplemented",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    notImplemented (const ::openstack::xml::NotImplementedAPIFault& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::NotImplementedAPIFault) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "notImplemented",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "notImplemented",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::notImplemented (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const CloudServersAPIFault& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // message
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        const CloudServersAPIFault::MessageType& x (i.message ());
        if (typeid (CloudServersAPIFault::MessageType) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              "message",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              e));

          s << x;
        }
        else
          tsm.serialize (
            "message",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            false, true, e, x);
      }

      // details
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.details ())
        {
          const CloudServersAPIFault::DetailsType& x (*i.details ());
          if (typeid (CloudServersAPIFault::DetailsType) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "details",
                "http://docs.rackspacecloud.com/servers/api/v1.0",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "details",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              false, true, e, x);
        }
      }

      // code
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "code",
            e));

        a << i.code ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, CloudServersAPIFault >
    _xsd_CloudServersAPIFault_type_serializer_init (
      "CloudServersAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const ItemNotFoundAPIFault& i)
    {
      e << static_cast< const ::openstack::xml::CloudServersAPIFault& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ItemNotFoundAPIFault >
    _xsd_ItemNotFoundAPIFault_type_serializer_init (
      "ItemNotFoundAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const BuildInProgressAPIFault& i)
    {
      e << static_cast< const ::openstack::xml::CloudServersAPIFault& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BuildInProgressAPIFault >
    _xsd_BuildInProgressAPIFault_type_serializer_init (
      "BuildInProgressAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const ServerCapacityUnavailableAPIFault& i)
    {
      e << static_cast< const ::openstack::xml::CloudServersAPIFault& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ServerCapacityUnavailableAPIFault >
    _xsd_ServerCapacityUnavailableAPIFault_type_serializer_init (
      "ServerCapacityUnavailableAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const BackupOrResizeInProgressAPIFault& i)
    {
      e << static_cast< const ::openstack::xml::CloudServersAPIFault& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BackupOrResizeInProgressAPIFault >
    _xsd_BackupOrResizeInProgressAPIFault_type_serializer_init (
      "BackupOrResizeInProgressAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const ResizeNotAllowedAPIFault& i)
    {
      e << static_cast< const ::openstack::xml::CloudServersAPIFault& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ResizeNotAllowedAPIFault >
    _xsd_ResizeNotAllowedAPIFault_type_serializer_init (
      "ResizeNotAllowedAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const ServiceUnavailableAPIFault& i)
    {
      e << static_cast< const ::openstack::xml::CloudServersAPIFault& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ServiceUnavailableAPIFault >
    _xsd_ServiceUnavailableAPIFault_type_serializer_init (
      "ServiceUnavailableAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const UnauthorizedAPIFault& i)
    {
      e << static_cast< const ::openstack::xml::CloudServersAPIFault& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, UnauthorizedAPIFault >
    _xsd_UnauthorizedAPIFault_type_serializer_init (
      "UnauthorizedAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const OverLimitAPIFault& i)
    {
      e << static_cast< const ::openstack::xml::CloudServersAPIFault& > (i);

      // retryAfter
      //
      if (i.retryAfter ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "retryAfter",
            e));

        a << *i.retryAfter ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, OverLimitAPIFault >
    _xsd_OverLimitAPIFault_type_serializer_init (
      "OverLimitAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const BadRequestAPIFault& i)
    {
      e << static_cast< const ::openstack::xml::CloudServersAPIFault& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BadRequestAPIFault >
    _xsd_BadRequestAPIFault_type_serializer_init (
      "BadRequestAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const BadMediaTypeAPIFault& i)
    {
      e << static_cast< const ::openstack::xml::CloudServersAPIFault& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BadMediaTypeAPIFault >
    _xsd_BadMediaTypeAPIFault_type_serializer_init (
      "BadMediaTypeAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const BadMethodAPIFault& i)
    {
      e << static_cast< const ::openstack::xml::CloudServersAPIFault& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, BadMethodAPIFault >
    _xsd_BadMethodAPIFault_type_serializer_init (
      "BadMethodAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const NotImplementedAPIFault& i)
    {
      e << static_cast< const ::openstack::xml::CloudServersAPIFault& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, NotImplementedAPIFault >
    _xsd_NotImplementedAPIFault_type_serializer_init (
      "NotImplementedAPIFault",
      "http://docs.rackspacecloud.com/servers/api/v1.0");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

