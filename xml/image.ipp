// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XSDS_IMAGE_IPP
#define XSDS_IMAGE_IPP

// Begin prologue.
//
//
// End prologue.

#include "common.ipp"

namespace openstack
{
  namespace xml
  {
    // Image
    // 

    inline
    const Image::IdOptional& Image::
    id () const
    {
      return this->id_;
    }

    inline
    Image::IdOptional& Image::
    id ()
    {
      return this->id_;
    }

    inline
    void Image::
    id (const IdType& x)
    {
      this->id_.set (x);
    }

    inline
    void Image::
    id (const IdOptional& x)
    {
      this->id_ = x;
    }

    inline
    const Image::NameType& Image::
    name () const
    {
      return this->name_.get ();
    }

    inline
    Image::NameType& Image::
    name ()
    {
      return this->name_.get ();
    }

    inline
    void Image::
    name (const NameType& x)
    {
      this->name_.set (x);
    }

    inline
    void Image::
    name (::std::auto_ptr< NameType > x)
    {
      this->name_.set (x);
    }

    inline
    const Image::ServerIdOptional& Image::
    serverId () const
    {
      return this->serverId_;
    }

    inline
    Image::ServerIdOptional& Image::
    serverId ()
    {
      return this->serverId_;
    }

    inline
    void Image::
    serverId (const ServerIdType& x)
    {
      this->serverId_.set (x);
    }

    inline
    void Image::
    serverId (const ServerIdOptional& x)
    {
      this->serverId_ = x;
    }

    inline
    const Image::UpdatedOptional& Image::
    updated () const
    {
      return this->updated_;
    }

    inline
    Image::UpdatedOptional& Image::
    updated ()
    {
      return this->updated_;
    }

    inline
    void Image::
    updated (const UpdatedType& x)
    {
      this->updated_.set (x);
    }

    inline
    void Image::
    updated (const UpdatedOptional& x)
    {
      this->updated_ = x;
    }

    inline
    void Image::
    updated (::std::auto_ptr< UpdatedType > x)
    {
      this->updated_.set (x);
    }

    inline
    const Image::CreatedOptional& Image::
    created () const
    {
      return this->created_;
    }

    inline
    Image::CreatedOptional& Image::
    created ()
    {
      return this->created_;
    }

    inline
    void Image::
    created (const CreatedType& x)
    {
      this->created_.set (x);
    }

    inline
    void Image::
    created (const CreatedOptional& x)
    {
      this->created_ = x;
    }

    inline
    void Image::
    created (::std::auto_ptr< CreatedType > x)
    {
      this->created_.set (x);
    }

    inline
    const Image::ProgressOptional& Image::
    progress () const
    {
      return this->progress_;
    }

    inline
    Image::ProgressOptional& Image::
    progress ()
    {
      return this->progress_;
    }

    inline
    void Image::
    progress (const ProgressType& x)
    {
      this->progress_.set (x);
    }

    inline
    void Image::
    progress (const ProgressOptional& x)
    {
      this->progress_ = x;
    }

    inline
    void Image::
    progress (::std::auto_ptr< ProgressType > x)
    {
      this->progress_.set (x);
    }

    inline
    const Image::StatusOptional& Image::
    status () const
    {
      return this->status_;
    }

    inline
    Image::StatusOptional& Image::
    status ()
    {
      return this->status_;
    }

    inline
    void Image::
    status (const StatusType& x)
    {
      this->status_.set (x);
    }

    inline
    void Image::
    status (const StatusOptional& x)
    {
      this->status_ = x;
    }

    inline
    void Image::
    status (::std::auto_ptr< StatusType > x)
    {
      this->status_.set (x);
    }


    // Images
    // 

    inline
    const Images::ImageSequence& Images::
    image () const
    {
      return this->image_;
    }

    inline
    Images::ImageSequence& Images::
    image ()
    {
      return this->image_;
    }

    inline
    void Images::
    image (const ImageSequence& s)
    {
      this->image_ = s;
    }


    // ImageStatus
    // 

    inline
    ImageStatus::
    ImageStatus (Value v)
    : ::xml_schema::String (_xsd_ImageStatus_literals_[v])
    {
    }

    inline
    ImageStatus::
    ImageStatus (const char* v)
    : ::xml_schema::String (v)
    {
    }

    inline
    ImageStatus::
    ImageStatus (const ::std::string& v)
    : ::xml_schema::String (v)
    {
    }

    inline
    ImageStatus::
    ImageStatus (const ::xml_schema::String& v)
    : ::xml_schema::String (v)
    {
    }

    inline
    ImageStatus::
    ImageStatus (const ImageStatus& v,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::String (v, f, c)
    {
    }

    inline
    ImageStatus& ImageStatus::
    operator= (Value v)
    {
      static_cast< ::xml_schema::String& > (*this) = 
      ::xml_schema::String (_xsd_ImageStatus_literals_[v]);

      return *this;
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // XSDS_IMAGE_IPP
