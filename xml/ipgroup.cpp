// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "ipgroup.hpp"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace openstack
{
  namespace xml
  {
    // SharedIpGroup
    //

    SharedIpGroup::
    SharedIpGroup (const NameType& name)
    : ::xml_schema::Type (),
      server_ (::xml_schema::Flags (), this),
      servers_ (::xml_schema::Flags (), this),
      id_ (::xml_schema::Flags (), this),
      name_ (name, ::xml_schema::Flags (), this)
    {
    }

    SharedIpGroup::
    SharedIpGroup (const SharedIpGroup& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      server_ (x.server_, f, this),
      servers_ (x.servers_, f, this),
      id_ (x.id_, f, this),
      name_ (x.name_, f, this)
    {
    }

    SharedIpGroup::
    SharedIpGroup (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      server_ (f, this),
      servers_ (f, this),
      id_ (f, this),
      name_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
        this->parse (p, f);
      }
    }

    void SharedIpGroup::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // server
        //
        {
          ::xsd::cxx::tree::type_factory_map< char >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              "server",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              &::xsd::cxx::tree::factory_impl< ServerType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->server_)
            {
              ::std::auto_ptr< ServerType > r (
                dynamic_cast< ServerType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->server_.set (r);
              continue;
            }
          }
        }

        // servers
        //
        {
          ::xsd::cxx::tree::type_factory_map< char >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              "servers",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              &::xsd::cxx::tree::factory_impl< ServersType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->servers_)
            {
              ::std::auto_ptr< ServersType > r (
                dynamic_cast< ServersType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->servers_.set (r);
              continue;
            }
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          this->id_.set (IdTraits::create (i, f, this));
          continue;
        }

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< NameType > r (
            NameTraits::create (i, f, this));

          this->name_.set (r);
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }
    }

    SharedIpGroup* SharedIpGroup::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SharedIpGroup (*this, f, c);
    }

    SharedIpGroup::
    ~SharedIpGroup ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, SharedIpGroup >
    _xsd_SharedIpGroup_type_factory_init (
      "SharedIpGroup",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // SharedIpGroups
    //

    SharedIpGroups::
    SharedIpGroups ()
    : ::xml_schema::Type (),
      sharedIpGroup_ (::xml_schema::Flags (), this)
    {
    }

    SharedIpGroups::
    SharedIpGroups (const SharedIpGroups& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      sharedIpGroup_ (x.sharedIpGroup_, f, this)
    {
    }

    SharedIpGroups::
    SharedIpGroups (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      sharedIpGroup_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void SharedIpGroups::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // sharedIpGroup
        //
        {
          ::xsd::cxx::tree::type_factory_map< char >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              "sharedIpGroup",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              &::xsd::cxx::tree::factory_impl< SharedIpGroupType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< SharedIpGroupType > r (
              dynamic_cast< SharedIpGroupType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->sharedIpGroup_.push_back (r);
            continue;
          }
        }

        break;
      }
    }

    SharedIpGroups* SharedIpGroups::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SharedIpGroups (*this, f, c);
    }

    SharedIpGroups::
    ~SharedIpGroups ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, SharedIpGroups >
    _xsd_SharedIpGroups_type_factory_init (
      "SharedIpGroups",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // ServerIDList
    //

    ServerIDList::
    ServerIDList ()
    : ::xml_schema::Type (),
      server_ (::xml_schema::Flags (), this)
    {
    }

    ServerIDList::
    ServerIDList (const ServerIDList& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      server_ (x.server_, f, this)
    {
    }

    ServerIDList::
    ServerIDList (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      server_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ServerIDList::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // server
        //
        {
          ::xsd::cxx::tree::type_factory_map< char >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              "server",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              &::xsd::cxx::tree::factory_impl< ServerType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< ServerType > r (
              dynamic_cast< ServerType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->server_.push_back (r);
            continue;
          }
        }

        break;
      }
    }

    ServerIDList* ServerIDList::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ServerIDList (*this, f, c);
    }

    ServerIDList::
    ~ServerIDList ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ServerIDList >
    _xsd_ServerIDList_type_factory_init (
      "ServerIDList",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // ServerID
    //

    ServerID::
    ServerID (const IdType& id)
    : ::xml_schema::Type (),
      id_ (id, ::xml_schema::Flags (), this)
    {
    }

    ServerID::
    ServerID (const ServerID& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      id_ (x.id_, f, this)
    {
    }

    ServerID::
    ServerID (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      id_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void ServerID::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          this->id_.set (IdTraits::create (i, f, this));
          continue;
        }
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "id",
          "");
      }
    }

    ServerID* ServerID::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ServerID (*this, f, c);
    }

    ServerID::
    ~ServerID ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ServerID >
    _xsd_ServerID_type_factory_init (
      "ServerID",
      "http://docs.rackspacecloud.com/servers/api/v1.0");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace openstack
{
  namespace xml
  {
    ::std::auto_ptr< ::openstack::xml::SharedIpGroup >
    sharedIpGroup (const ::std::string& u,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::SharedIpGroup > r (
        ::openstack::xml::sharedIpGroup (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroup >
    sharedIpGroup (const ::std::string& u,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::SharedIpGroup > r (
        ::openstack::xml::sharedIpGroup (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroup >
    sharedIpGroup (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::SharedIpGroup > r (
        ::openstack::xml::sharedIpGroup (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroup >
    sharedIpGroup (::std::istream& is,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::sharedIpGroup (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroup >
    sharedIpGroup (::std::istream& is,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::sharedIpGroup (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroup >
    sharedIpGroup (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::sharedIpGroup (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroup >
    sharedIpGroup (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::sharedIpGroup (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroup >
    sharedIpGroup (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::sharedIpGroup (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroup >
    sharedIpGroup (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::sharedIpGroup (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroup >
    sharedIpGroup (::xercesc::InputSource& i,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::SharedIpGroup > r (
        ::openstack::xml::sharedIpGroup (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroup >
    sharedIpGroup (::xercesc::InputSource& i,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::SharedIpGroup > r (
        ::openstack::xml::sharedIpGroup (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroup >
    sharedIpGroup (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::SharedIpGroup > r (
        ::openstack::xml::sharedIpGroup (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroup >
    sharedIpGroup (const ::xercesc::DOMDocument& d,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::SharedIpGroup > r (
          ::openstack::xml::sharedIpGroup (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "sharedIpGroup",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::SharedIpGroup >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::SharedIpGroup > r (
          dynamic_cast< ::openstack::xml::SharedIpGroup* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "sharedIpGroup",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroup >
    sharedIpGroup (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "sharedIpGroup",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::SharedIpGroup >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::SharedIpGroup > r (
          dynamic_cast< ::openstack::xml::SharedIpGroup* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "sharedIpGroup",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroups >
    sharedIpGroups (const ::std::string& u,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::SharedIpGroups > r (
        ::openstack::xml::sharedIpGroups (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroups >
    sharedIpGroups (const ::std::string& u,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::SharedIpGroups > r (
        ::openstack::xml::sharedIpGroups (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroups >
    sharedIpGroups (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::SharedIpGroups > r (
        ::openstack::xml::sharedIpGroups (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroups >
    sharedIpGroups (::std::istream& is,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::sharedIpGroups (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroups >
    sharedIpGroups (::std::istream& is,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::sharedIpGroups (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroups >
    sharedIpGroups (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::sharedIpGroups (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroups >
    sharedIpGroups (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::sharedIpGroups (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroups >
    sharedIpGroups (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::sharedIpGroups (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroups >
    sharedIpGroups (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::sharedIpGroups (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroups >
    sharedIpGroups (::xercesc::InputSource& i,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::SharedIpGroups > r (
        ::openstack::xml::sharedIpGroups (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroups >
    sharedIpGroups (::xercesc::InputSource& i,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::SharedIpGroups > r (
        ::openstack::xml::sharedIpGroups (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroups >
    sharedIpGroups (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::SharedIpGroups > r (
        ::openstack::xml::sharedIpGroups (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroups >
    sharedIpGroups (const ::xercesc::DOMDocument& d,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::SharedIpGroups > r (
          ::openstack::xml::sharedIpGroups (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "sharedIpGroups",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::SharedIpGroups >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::SharedIpGroups > r (
          dynamic_cast< ::openstack::xml::SharedIpGroups* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "sharedIpGroups",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::SharedIpGroups >
    sharedIpGroups (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "sharedIpGroups",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::SharedIpGroups >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::SharedIpGroups > r (
          dynamic_cast< ::openstack::xml::SharedIpGroups* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "sharedIpGroups",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace openstack
{
  namespace xml
  {
    void
    sharedIpGroup (::std::ostream& o,
                   const ::openstack::xml::SharedIpGroup& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::sharedIpGroup (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    sharedIpGroup (::std::ostream& o,
                   const ::openstack::xml::SharedIpGroup& s,
                   ::xml_schema::ErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::sharedIpGroup (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    sharedIpGroup (::std::ostream& o,
                   const ::openstack::xml::SharedIpGroup& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::sharedIpGroup (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    sharedIpGroup (::xercesc::XMLFormatTarget& t,
                   const ::openstack::xml::SharedIpGroup& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::sharedIpGroup (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    sharedIpGroup (::xercesc::XMLFormatTarget& t,
                   const ::openstack::xml::SharedIpGroup& s,
                   ::xml_schema::ErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::sharedIpGroup (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    sharedIpGroup (::xercesc::XMLFormatTarget& t,
                   const ::openstack::xml::SharedIpGroup& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::sharedIpGroup (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    sharedIpGroup (::xercesc::DOMDocument& d,
                   const ::openstack::xml::SharedIpGroup& s,
                   ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::SharedIpGroup) == typeid (s))
      {
        if (n.name () == "sharedIpGroup" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "sharedIpGroup",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "sharedIpGroup",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    sharedIpGroup (const ::openstack::xml::SharedIpGroup& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::SharedIpGroup) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "sharedIpGroup",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "sharedIpGroup",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::sharedIpGroup (*d, s, f);
      return d;
    }

    void
    sharedIpGroups (::std::ostream& o,
                    const ::openstack::xml::SharedIpGroups& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::sharedIpGroups (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    sharedIpGroups (::std::ostream& o,
                    const ::openstack::xml::SharedIpGroups& s,
                    ::xml_schema::ErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::sharedIpGroups (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    sharedIpGroups (::std::ostream& o,
                    const ::openstack::xml::SharedIpGroups& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::sharedIpGroups (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    sharedIpGroups (::xercesc::XMLFormatTarget& t,
                    const ::openstack::xml::SharedIpGroups& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::sharedIpGroups (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    sharedIpGroups (::xercesc::XMLFormatTarget& t,
                    const ::openstack::xml::SharedIpGroups& s,
                    ::xml_schema::ErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::sharedIpGroups (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    sharedIpGroups (::xercesc::XMLFormatTarget& t,
                    const ::openstack::xml::SharedIpGroups& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::sharedIpGroups (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    sharedIpGroups (::xercesc::DOMDocument& d,
                    const ::openstack::xml::SharedIpGroups& s,
                    ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::SharedIpGroups) == typeid (s))
      {
        if (n.name () == "sharedIpGroups" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "sharedIpGroups",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "sharedIpGroups",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    sharedIpGroups (const ::openstack::xml::SharedIpGroups& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::SharedIpGroups) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "sharedIpGroups",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "sharedIpGroups",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::sharedIpGroups (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const SharedIpGroup& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // server
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.server ())
        {
          const SharedIpGroup::ServerType& x (*i.server ());
          if (typeid (SharedIpGroup::ServerType) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "server",
                "http://docs.rackspacecloud.com/servers/api/v1.0",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "server",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              false, true, e, x);
        }
      }

      // servers
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        if (i.servers ())
        {
          const SharedIpGroup::ServersType& x (*i.servers ());
          if (typeid (SharedIpGroup::ServersType) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "servers",
                "http://docs.rackspacecloud.com/servers/api/v1.0",
                e));

            s << x;
          }
          else
            tsm.serialize (
              "servers",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              false, true, e, x);
        }
      }

      // id
      //
      if (i.id ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "id",
            e));

        a << *i.id ();
      }

      // name
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "name",
            e));

        a << i.name ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SharedIpGroup >
    _xsd_SharedIpGroup_type_serializer_init (
      "SharedIpGroup",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const SharedIpGroups& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // sharedIpGroup
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (SharedIpGroups::SharedIpGroupConstIterator
             b (i.sharedIpGroup ().begin ()), n (i.sharedIpGroup ().end ());
             b != n; ++b)
        {
          if (typeid (SharedIpGroups::SharedIpGroupType) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "sharedIpGroup",
                "http://docs.rackspacecloud.com/servers/api/v1.0",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "sharedIpGroup",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              false, true, e, *b);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, SharedIpGroups >
    _xsd_SharedIpGroups_type_serializer_init (
      "SharedIpGroups",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const ServerIDList& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // server
      //
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        for (ServerIDList::ServerConstIterator
             b (i.server ().begin ()), n (i.server ().end ());
             b != n; ++b)
        {
          if (typeid (ServerIDList::ServerType) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                "server",
                "http://docs.rackspacecloud.com/servers/api/v1.0",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              "server",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              false, true, e, *b);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ServerIDList >
    _xsd_ServerIDList_type_serializer_init (
      "ServerIDList",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const ServerID& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // id
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "id",
            e));

        a << i.id ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ServerID >
    _xsd_ServerID_type_serializer_init (
      "ServerID",
      "http://docs.rackspacecloud.com/servers/api/v1.0");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

