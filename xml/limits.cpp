// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "limits.hpp"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace openstack
{
  namespace xml
  {
    // Limits
    //

    Limits::
    Limits (const RateType& rate,
            const AbsoluteType& absolute)
    : ::xml_schema::Type (),
      rate_ (rate, ::xml_schema::Flags (), this),
      absolute_ (absolute, ::xml_schema::Flags (), this)
    {
    }

    Limits::
    Limits (::std::auto_ptr< RateType >& rate,
            ::std::auto_ptr< AbsoluteType >& absolute)
    : ::xml_schema::Type (),
      rate_ (rate, ::xml_schema::Flags (), this),
      absolute_ (absolute, ::xml_schema::Flags (), this)
    {
    }

    Limits::
    Limits (const Limits& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      rate_ (x.rate_, f, this),
      absolute_ (x.absolute_, f, this)
    {
    }

    Limits::
    Limits (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      rate_ (f, this),
      absolute_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void Limits::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // rate
        //
        {
          ::xsd::cxx::tree::type_factory_map< char >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              "rate",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              &::xsd::cxx::tree::factory_impl< RateType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!rate_.present ())
            {
              ::std::auto_ptr< RateType > r (
                dynamic_cast< RateType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->rate_.set (r);
              continue;
            }
          }
        }

        // absolute
        //
        {
          ::xsd::cxx::tree::type_factory_map< char >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              "absolute",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              &::xsd::cxx::tree::factory_impl< AbsoluteType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!absolute_.present ())
            {
              ::std::auto_ptr< AbsoluteType > r (
                dynamic_cast< AbsoluteType* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< char > ();

              this->absolute_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!rate_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "rate",
          "http://docs.rackspacecloud.com/servers/api/v1.0");
      }

      if (!absolute_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "absolute",
          "http://docs.rackspacecloud.com/servers/api/v1.0");
      }
    }

    Limits* Limits::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Limits (*this, f, c);
    }

    Limits::
    ~Limits ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, Limits >
    _xsd_Limits_type_factory_init (
      "Limits",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // RateLimits
    //

    RateLimits::
    RateLimits ()
    : ::xml_schema::Type (),
      limit_ (::xml_schema::Flags (), this)
    {
    }

    RateLimits::
    RateLimits (const RateLimits& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      limit_ (x.limit_, f, this)
    {
    }

    RateLimits::
    RateLimits (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      limit_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void RateLimits::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // limit
        //
        {
          ::xsd::cxx::tree::type_factory_map< char >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              "limit",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              &::xsd::cxx::tree::factory_impl< LimitType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< LimitType > r (
              dynamic_cast< LimitType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->limit_.push_back (r);
            continue;
          }
        }

        break;
      }
    }

    RateLimits* RateLimits::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class RateLimits (*this, f, c);
    }

    RateLimits::
    ~RateLimits ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, RateLimits >
    _xsd_RateLimits_type_factory_init (
      "RateLimits",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // AbsoluteLimits
    //

    AbsoluteLimits::
    AbsoluteLimits ()
    : ::xml_schema::Type (),
      limit_ (::xml_schema::Flags (), this)
    {
    }

    AbsoluteLimits::
    AbsoluteLimits (const AbsoluteLimits& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      limit_ (x.limit_, f, this)
    {
    }

    AbsoluteLimits::
    AbsoluteLimits (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      limit_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
        this->parse (p, f);
      }
    }

    void AbsoluteLimits::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // limit
        //
        {
          ::xsd::cxx::tree::type_factory_map< char >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              "limit",
              "http://docs.rackspacecloud.com/servers/api/v1.0",
              &::xsd::cxx::tree::factory_impl< LimitType >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< LimitType > r (
              dynamic_cast< LimitType* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< char > ();

            this->limit_.push_back (r);
            continue;
          }
        }

        break;
      }
    }

    AbsoluteLimits* AbsoluteLimits::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class AbsoluteLimits (*this, f, c);
    }

    AbsoluteLimits::
    ~AbsoluteLimits ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, AbsoluteLimits >
    _xsd_AbsoluteLimits_type_factory_init (
      "AbsoluteLimits",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // RateLimit
    //

    RateLimit::
    RateLimit (const VerbType& verb,
               const URIType& URI,
               const RegexType& regex,
               const UnitType& unit,
               const ValueType& value,
               const RemainingType& remaining,
               const ResetTimeType& resetTime)
    : ::xml_schema::Type (),
      verb_ (verb, ::xml_schema::Flags (), this),
      URI_ (URI, ::xml_schema::Flags (), this),
      regex_ (regex, ::xml_schema::Flags (), this),
      unit_ (unit, ::xml_schema::Flags (), this),
      value_ (value, ::xml_schema::Flags (), this),
      remaining_ (remaining, ::xml_schema::Flags (), this),
      resetTime_ (resetTime, ::xml_schema::Flags (), this)
    {
    }

    RateLimit::
    RateLimit (const RateLimit& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      verb_ (x.verb_, f, this),
      URI_ (x.URI_, f, this),
      regex_ (x.regex_, f, this),
      unit_ (x.unit_, f, this),
      value_ (x.value_, f, this),
      remaining_ (x.remaining_, f, this),
      resetTime_ (x.resetTime_, f, this)
    {
    }

    RateLimit::
    RateLimit (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      verb_ (f, this),
      URI_ (f, this),
      regex_ (f, this),
      unit_ (f, this),
      value_ (f, this),
      remaining_ (f, this),
      resetTime_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void RateLimit::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "verb" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< VerbType > r (
            VerbTraits::create (i, f, this));

          this->verb_.set (r);
          continue;
        }

        if (n.name () == "URI" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< URIType > r (
            URITraits::create (i, f, this));

          this->URI_.set (r);
          continue;
        }

        if (n.name () == "regex" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< RegexType > r (
            RegexTraits::create (i, f, this));

          this->regex_.set (r);
          continue;
        }

        if (n.name () == "unit" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< UnitType > r (
            UnitTraits::create (i, f, this));

          this->unit_.set (r);
          continue;
        }

        if (n.name () == "value" && n.namespace_ ().empty ())
        {
          this->value_.set (ValueTraits::create (i, f, this));
          continue;
        }

        if (n.name () == "remaining" && n.namespace_ ().empty ())
        {
          this->remaining_.set (RemainingTraits::create (i, f, this));
          continue;
        }

        if (n.name () == "resetTime" && n.namespace_ ().empty ())
        {
          this->resetTime_.set (ResetTimeTraits::create (i, f, this));
          continue;
        }
      }

      if (!verb_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "verb",
          "");
      }

      if (!URI_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "URI",
          "");
      }

      if (!regex_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "regex",
          "");
      }

      if (!unit_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "unit",
          "");
      }

      if (!value_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "value",
          "");
      }

      if (!remaining_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "remaining",
          "");
      }

      if (!resetTime_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "resetTime",
          "");
      }
    }

    RateLimit* RateLimit::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class RateLimit (*this, f, c);
    }

    RateLimit::
    ~RateLimit ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, RateLimit >
    _xsd_RateLimit_type_factory_init (
      "RateLimit",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // AbsoluteLimit
    //

    AbsoluteLimit::
    AbsoluteLimit (const NameType& name,
                   const ValueType& value)
    : ::xml_schema::Type (),
      name_ (name, ::xml_schema::Flags (), this),
      value_ (value, ::xml_schema::Flags (), this)
    {
    }

    AbsoluteLimit::
    AbsoluteLimit (const AbsoluteLimit& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      name_ (x.name_, f, this),
      value_ (x.value_, f, this)
    {
    }

    AbsoluteLimit::
    AbsoluteLimit (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      name_ (f, this),
      value_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void AbsoluteLimit::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< NameType > r (
            NameTraits::create (i, f, this));

          this->name_.set (r);
          continue;
        }

        if (n.name () == "value" && n.namespace_ ().empty ())
        {
          this->value_.set (ValueTraits::create (i, f, this));
          continue;
        }
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "name",
          "");
      }

      if (!value_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "value",
          "");
      }
    }

    AbsoluteLimit* AbsoluteLimit::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class AbsoluteLimit (*this, f, c);
    }

    AbsoluteLimit::
    ~AbsoluteLimit ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, AbsoluteLimit >
    _xsd_AbsoluteLimit_type_factory_init (
      "AbsoluteLimit",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // HTTPVerb
    //

    HTTPVerb::
    HTTPVerb (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
    : ::xml_schema::String (e, f, c)
    {
      _xsd_HTTPVerb_convert ();
    }

    HTTPVerb::
    HTTPVerb (const ::xercesc::DOMAttr& a,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
    : ::xml_schema::String (a, f, c)
    {
      _xsd_HTTPVerb_convert ();
    }

    HTTPVerb::
    HTTPVerb (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
    : ::xml_schema::String (s, e, f, c)
    {
      _xsd_HTTPVerb_convert ();
    }

    HTTPVerb* HTTPVerb::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class HTTPVerb (*this, f, c);
    }

    HTTPVerb::Value HTTPVerb::
    _xsd_HTTPVerb_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_HTTPVerb_literals_);
      const Value* i (::std::lower_bound (
                        _xsd_HTTPVerb_indexes_,
                        _xsd_HTTPVerb_indexes_ + 5,
                        *this,
                        c));

      if (i == _xsd_HTTPVerb_indexes_ + 5 || _xsd_HTTPVerb_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const HTTPVerb::
    _xsd_HTTPVerb_literals_[5] =
    {
      "POST",
      "PUT",
      "GET",
      "DELETE",
      "HEAD"
    };

    const HTTPVerb::Value HTTPVerb::
    _xsd_HTTPVerb_indexes_[5] =
    {
      ::openstack::xml::HTTPVerb::DELETE,
      ::openstack::xml::HTTPVerb::GET,
      ::openstack::xml::HTTPVerb::HEAD,
      ::openstack::xml::HTTPVerb::POST,
      ::openstack::xml::HTTPVerb::PUT
    };

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, HTTPVerb >
    _xsd_HTTPVerb_type_factory_init (
      "HTTPVerb",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // RateLimitUnit
    //

    RateLimitUnit::
    RateLimitUnit (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::String (e, f, c)
    {
      _xsd_RateLimitUnit_convert ();
    }

    RateLimitUnit::
    RateLimitUnit (const ::xercesc::DOMAttr& a,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::String (a, f, c)
    {
      _xsd_RateLimitUnit_convert ();
    }

    RateLimitUnit::
    RateLimitUnit (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::String (s, e, f, c)
    {
      _xsd_RateLimitUnit_convert ();
    }

    RateLimitUnit* RateLimitUnit::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class RateLimitUnit (*this, f, c);
    }

    RateLimitUnit::Value RateLimitUnit::
    _xsd_RateLimitUnit_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RateLimitUnit_literals_);
      const Value* i (::std::lower_bound (
                        _xsd_RateLimitUnit_indexes_,
                        _xsd_RateLimitUnit_indexes_ + 3,
                        *this,
                        c));

      if (i == _xsd_RateLimitUnit_indexes_ + 3 || _xsd_RateLimitUnit_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const RateLimitUnit::
    _xsd_RateLimitUnit_literals_[3] =
    {
      "MINUTE",
      "HOUR",
      "DAY"
    };

    const RateLimitUnit::Value RateLimitUnit::
    _xsd_RateLimitUnit_indexes_[3] =
    {
      ::openstack::xml::RateLimitUnit::DAY,
      ::openstack::xml::RateLimitUnit::HOUR,
      ::openstack::xml::RateLimitUnit::MINUTE
    };

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, RateLimitUnit >
    _xsd_RateLimitUnit_type_factory_init (
      "RateLimitUnit",
      "http://docs.rackspacecloud.com/servers/api/v1.0");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace openstack
{
  namespace xml
  {
    ::std::auto_ptr< ::openstack::xml::Limits >
    limits (const ::std::string& u,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::Limits > r (
        ::openstack::xml::limits (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Limits >
    limits (const ::std::string& u,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Limits > r (
        ::openstack::xml::limits (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Limits >
    limits (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Limits > r (
        ::openstack::xml::limits (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Limits >
    limits (::std::istream& is,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::limits (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Limits >
    limits (::std::istream& is,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::limits (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Limits >
    limits (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::limits (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Limits >
    limits (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::limits (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Limits >
    limits (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::limits (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Limits >
    limits (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::limits (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Limits >
    limits (::xercesc::InputSource& i,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::Limits > r (
        ::openstack::xml::limits (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Limits >
    limits (::xercesc::InputSource& i,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Limits > r (
        ::openstack::xml::limits (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Limits >
    limits (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Limits > r (
        ::openstack::xml::limits (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Limits >
    limits (const ::xercesc::DOMDocument& d,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::Limits > r (
          ::openstack::xml::limits (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "limits",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::Limits >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::Limits > r (
          dynamic_cast< ::openstack::xml::Limits* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "limits",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::Limits >
    limits (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "limits",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::Limits >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::Limits > r (
          dynamic_cast< ::openstack::xml::Limits* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "limits",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

