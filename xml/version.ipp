// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XSDS_VERSION_IPP
#define XSDS_VERSION_IPP

// Begin prologue.
//
//
// End prologue.

namespace openstack
{
  namespace xml
  {
    // Version
    // 

    inline
    const Version::IdType& Version::
    id () const
    {
      return this->id_.get ();
    }

    inline
    const Version::IdType& Version::
    idDefaultValue ()
    {
      return id_default_value_;
    }

    inline
    const Version::StatusType& Version::
    status () const
    {
      return this->status_.get ();
    }

    inline
    Version::StatusType& Version::
    status ()
    {
      return this->status_.get ();
    }

    inline
    void Version::
    status (const StatusType& x)
    {
      this->status_.set (x);
    }

    inline
    void Version::
    status (::std::auto_ptr< StatusType > x)
    {
      this->status_.set (x);
    }

    inline
    const Version::DocURLType& Version::
    docURL () const
    {
      return this->docURL_.get ();
    }

    inline
    Version::DocURLType& Version::
    docURL ()
    {
      return this->docURL_.get ();
    }

    inline
    void Version::
    docURL (const DocURLType& x)
    {
      this->docURL_.set (x);
    }

    inline
    void Version::
    docURL (::std::auto_ptr< DocURLType > x)
    {
      this->docURL_.set (x);
    }

    inline
    const Version::WadlType& Version::
    wadl () const
    {
      return this->wadl_.get ();
    }

    inline
    Version::WadlType& Version::
    wadl ()
    {
      return this->wadl_.get ();
    }

    inline
    void Version::
    wadl (const WadlType& x)
    {
      this->wadl_.set (x);
    }

    inline
    void Version::
    wadl (::std::auto_ptr< WadlType > x)
    {
      this->wadl_.set (x);
    }


    // VersionStatus
    // 

    inline
    VersionStatus::
    VersionStatus (Value v)
    : ::xml_schema::String (_xsd_VersionStatus_literals_[v])
    {
    }

    inline
    VersionStatus::
    VersionStatus (const char* v)
    : ::xml_schema::String (v)
    {
    }

    inline
    VersionStatus::
    VersionStatus (const ::std::string& v)
    : ::xml_schema::String (v)
    {
    }

    inline
    VersionStatus::
    VersionStatus (const ::xml_schema::String& v)
    : ::xml_schema::String (v)
    {
    }

    inline
    VersionStatus::
    VersionStatus (const VersionStatus& v,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::String (v, f, c)
    {
    }

    inline
    VersionStatus& VersionStatus::
    operator= (Value v)
    {
      static_cast< ::xml_schema::String& > (*this) = 
      ::xml_schema::String (_xsd_VersionStatus_literals_[v]);

      return *this;
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // XSDS_VERSION_IPP
