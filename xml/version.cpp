// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "version.hpp"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace openstack
{
  namespace xml
  {
    // Version
    //

    const Version::IdType Version::id_default_value_ (
      "v1.0");

    Version::
    Version (const StatusType& status,
             const DocURLType& docURL,
             const WadlType& wadl)
    : ::xml_schema::Type (),
      id_ (idDefaultValue (), ::xml_schema::Flags (), this),
      status_ (status, ::xml_schema::Flags (), this),
      docURL_ (docURL, ::xml_schema::Flags (), this),
      wadl_ (wadl, ::xml_schema::Flags (), this)
    {
    }

    Version::
    Version (const Version& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      id_ (x.id_, f, this),
      status_ (x.status_, f, this),
      docURL_ (x.docURL_, f, this),
      wadl_ (x.wadl_, f, this)
    {
    }

    Version::
    Version (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      id_ (f, this),
      status_ (f, this),
      docURL_ (f, this),
      wadl_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Version::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< IdType > r (
            IdTraits::create (i, f, this));

          this->id_.set (r);
          continue;
        }

        if (n.name () == "status" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< StatusType > r (
            StatusTraits::create (i, f, this));

          this->status_.set (r);
          continue;
        }

        if (n.name () == "docURL" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< DocURLType > r (
            DocURLTraits::create (i, f, this));

          this->docURL_.set (r);
          continue;
        }

        if (n.name () == "wadl" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< WadlType > r (
            WadlTraits::create (i, f, this));

          this->wadl_.set (r);
          continue;
        }
      }

      if (!id_.present ())
      {
        this->id_.set (idDefaultValue ());
      }

      if (!status_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "status",
          "");
      }

      if (!docURL_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "docURL",
          "");
      }

      if (!wadl_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "wadl",
          "");
      }
    }

    Version* Version::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Version (*this, f, c);
    }

    Version::
    ~Version ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, Version >
    _xsd_Version_type_factory_init (
      "Version",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // VersionStatus
    //

    VersionStatus::
    VersionStatus (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::String (e, f, c)
    {
      _xsd_VersionStatus_convert ();
    }

    VersionStatus::
    VersionStatus (const ::xercesc::DOMAttr& a,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::String (a, f, c)
    {
      _xsd_VersionStatus_convert ();
    }

    VersionStatus::
    VersionStatus (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::String (s, e, f, c)
    {
      _xsd_VersionStatus_convert ();
    }

    VersionStatus* VersionStatus::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class VersionStatus (*this, f, c);
    }

    VersionStatus::Value VersionStatus::
    _xsd_VersionStatus_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_VersionStatus_literals_);
      const Value* i (::std::lower_bound (
                        _xsd_VersionStatus_indexes_,
                        _xsd_VersionStatus_indexes_ + 3,
                        *this,
                        c));

      if (i == _xsd_VersionStatus_indexes_ + 3 || _xsd_VersionStatus_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const VersionStatus::
    _xsd_VersionStatus_literals_[3] =
    {
      "BETA",
      "CURRENT",
      "DEPRECATED"
    };

    const VersionStatus::Value VersionStatus::
    _xsd_VersionStatus_indexes_[3] =
    {
      ::openstack::xml::VersionStatus::BETA,
      ::openstack::xml::VersionStatus::CURRENT,
      ::openstack::xml::VersionStatus::DEPRECATED
    };

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, VersionStatus >
    _xsd_VersionStatus_type_factory_init (
      "VersionStatus",
      "http://docs.rackspacecloud.com/servers/api/v1.0");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace openstack
{
  namespace xml
  {
    ::std::auto_ptr< ::openstack::xml::Version >
    version (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::Version > r (
        ::openstack::xml::version (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Version >
    version (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Version > r (
        ::openstack::xml::version (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Version >
    version (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Version > r (
        ::openstack::xml::version (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Version >
    version (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::version (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Version >
    version (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::version (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Version >
    version (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::version (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Version >
    version (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::version (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Version >
    version (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::version (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Version >
    version (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::version (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Version >
    version (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::Version > r (
        ::openstack::xml::version (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Version >
    version (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Version > r (
        ::openstack::xml::version (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Version >
    version (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Version > r (
        ::openstack::xml::version (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Version >
    version (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::Version > r (
          ::openstack::xml::version (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "version",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::Version >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::Version > r (
          dynamic_cast< ::openstack::xml::Version* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "version",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::Version >
    version (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "version",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::Version >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::Version > r (
          dynamic_cast< ::openstack::xml::Version* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "version",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace openstack
{
  namespace xml
  {
    void
    version (::std::ostream& o,
             const ::openstack::xml::Version& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::version (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    version (::std::ostream& o,
             const ::openstack::xml::Version& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::version (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    version (::std::ostream& o,
             const ::openstack::xml::Version& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::version (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    version (::xercesc::XMLFormatTarget& t,
             const ::openstack::xml::Version& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::version (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    version (::xercesc::XMLFormatTarget& t,
             const ::openstack::xml::Version& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::version (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    version (::xercesc::XMLFormatTarget& t,
             const ::openstack::xml::Version& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::version (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    version (::xercesc::DOMDocument& d,
             const ::openstack::xml::Version& s,
             ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::Version) == typeid (s))
      {
        if (n.name () == "version" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "version",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "version",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    version (const ::openstack::xml::Version& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::Version) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "version",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "version",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::version (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const Version& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // id
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "id",
            e));

        a << i.id ();
      }

      // status
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "status",
            e));

        a << i.status ();
      }

      // docURL
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "docURL",
            e));

        a << i.docURL ();
      }

      // wadl
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "wadl",
            e));

        a << i.wadl ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Version >
    _xsd_Version_type_serializer_init (
      "Version",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const VersionStatus& i)
    {
      e << static_cast< const ::xml_schema::String& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const VersionStatus& i)
    {
      a << static_cast< const ::xml_schema::String& > (i);
    }

    void
    operator<< (::xml_schema::ListStream& l,
                const VersionStatus& i)
    {
      l << static_cast< const ::xml_schema::String& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, VersionStatus >
    _xsd_VersionStatus_type_serializer_init (
      "VersionStatus",
      "http://docs.rackspacecloud.com/servers/api/v1.0");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

