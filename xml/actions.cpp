// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "actions.hpp"

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace openstack
{
  namespace xml
  {
    // Action
    //

    Action::
    Action ()
    : ::xml_schema::Type ()
    {
    }

    Action::
    Action (const Action& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c)
    {
    }

    Action::
    Action (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f, c)
    {
    }

    Action::
    Action (const ::xercesc::DOMAttr& a,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (a, f, c)
    {
    }

    Action::
    Action (const ::std::string& s,
            const ::xercesc::DOMElement* e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (s, e, f, c)
    {
    }

    Action* Action::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Action (*this, f, c);
    }

    Action::
    ~Action ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, Action >
    _xsd_Action_type_factory_init (
      "Action",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // Reboot
    //

    Reboot::
    Reboot (const TypeType& type)
    : ::openstack::xml::Action (),
      type_ (type, ::xml_schema::Flags (), this)
    {
    }

    Reboot::
    Reboot (const Reboot& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::openstack::xml::Action (x, f, c),
      type_ (x.type_, f, this)
    {
    }

    Reboot::
    Reboot (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::openstack::xml::Action (e, f | ::xml_schema::Flags::base, c),
      type_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Reboot::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "type" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< TypeType > r (
            TypeTraits::create (i, f, this));

          this->type_.set (r);
          continue;
        }
      }

      if (!type_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "type",
          "");
      }
    }

    Reboot* Reboot::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Reboot (*this, f, c);
    }

    Reboot::
    ~Reboot ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, Reboot >
    _xsd_Reboot_type_factory_init (
      "Reboot",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // Rebuild
    //

    Rebuild::
    Rebuild (const ImageIdType& imageId)
    : ::openstack::xml::Action (),
      imageId_ (imageId, ::xml_schema::Flags (), this)
    {
    }

    Rebuild::
    Rebuild (const Rebuild& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::openstack::xml::Action (x, f, c),
      imageId_ (x.imageId_, f, this)
    {
    }

    Rebuild::
    Rebuild (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::openstack::xml::Action (e, f | ::xml_schema::Flags::base, c),
      imageId_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Rebuild::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "imageId" && n.namespace_ ().empty ())
        {
          this->imageId_.set (ImageIdTraits::create (i, f, this));
          continue;
        }
      }

      if (!imageId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "imageId",
          "");
      }
    }

    Rebuild* Rebuild::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Rebuild (*this, f, c);
    }

    Rebuild::
    ~Rebuild ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, Rebuild >
    _xsd_Rebuild_type_factory_init (
      "Rebuild",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // Resize
    //

    Resize::
    Resize (const FlavorIdType& flavorId)
    : ::openstack::xml::Action (),
      flavorId_ (flavorId, ::xml_schema::Flags (), this)
    {
    }

    Resize::
    Resize (const Resize& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::openstack::xml::Action (x, f, c),
      flavorId_ (x.flavorId_, f, this)
    {
    }

    Resize::
    Resize (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::openstack::xml::Action (e, f | ::xml_schema::Flags::base, c),
      flavorId_ (f, this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
        this->parse (p, f);
      }
    }

    void Resize::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        if (n.name () == "flavorId" && n.namespace_ ().empty ())
        {
          this->flavorId_.set (FlavorIdTraits::create (i, f, this));
          continue;
        }
      }

      if (!flavorId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< char > (
          "flavorId",
          "");
      }
    }

    Resize* Resize::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Resize (*this, f, c);
    }

    Resize::
    ~Resize ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, Resize >
    _xsd_Resize_type_factory_init (
      "Resize",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // ConfirmResize
    //

    ConfirmResize::
    ConfirmResize ()
    : ::openstack::xml::Action ()
    {
    }

    ConfirmResize::
    ConfirmResize (const ConfirmResize& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::openstack::xml::Action (x, f, c)
    {
    }

    ConfirmResize::
    ConfirmResize (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::openstack::xml::Action (e, f, c)
    {
    }

    ConfirmResize::
    ConfirmResize (const ::xercesc::DOMAttr& a,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::openstack::xml::Action (a, f, c)
    {
    }

    ConfirmResize::
    ConfirmResize (const ::std::string& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::openstack::xml::Action (s, e, f, c)
    {
    }

    ConfirmResize* ConfirmResize::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ConfirmResize (*this, f, c);
    }

    ConfirmResize::
    ~ConfirmResize ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, ConfirmResize >
    _xsd_ConfirmResize_type_factory_init (
      "ConfirmResize",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // RevertResize
    //

    RevertResize::
    RevertResize ()
    : ::openstack::xml::Action ()
    {
    }

    RevertResize::
    RevertResize (const RevertResize& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::openstack::xml::Action (x, f, c)
    {
    }

    RevertResize::
    RevertResize (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::openstack::xml::Action (e, f, c)
    {
    }

    RevertResize::
    RevertResize (const ::xercesc::DOMAttr& a,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::openstack::xml::Action (a, f, c)
    {
    }

    RevertResize::
    RevertResize (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::openstack::xml::Action (s, e, f, c)
    {
    }

    RevertResize* RevertResize::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class RevertResize (*this, f, c);
    }

    RevertResize::
    ~RevertResize ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, RevertResize >
    _xsd_RevertResize_type_factory_init (
      "RevertResize",
      "http://docs.rackspacecloud.com/servers/api/v1.0");

    // RebootType
    //

    RebootType::
    RebootType (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::String (e, f, c)
    {
      _xsd_RebootType_convert ();
    }

    RebootType::
    RebootType (const ::xercesc::DOMAttr& a,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::String (a, f, c)
    {
      _xsd_RebootType_convert ();
    }

    RebootType::
    RebootType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::String (s, e, f, c)
    {
      _xsd_RebootType_convert ();
    }

    RebootType* RebootType::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class RebootType (*this, f, c);
    }

    RebootType::Value RebootType::
    _xsd_RebootType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< char > c (_xsd_RebootType_literals_);
      const Value* i (::std::lower_bound (
                        _xsd_RebootType_indexes_,
                        _xsd_RebootType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_RebootType_indexes_ + 2 || _xsd_RebootType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
      }

      return *i;
    }

    const char* const RebootType::
    _xsd_RebootType_literals_[2] =
    {
      "HARD",
      "SOFT"
    };

    const RebootType::Value RebootType::
    _xsd_RebootType_indexes_[2] =
    {
      ::openstack::xml::RebootType::HARD,
      ::openstack::xml::RebootType::SOFT
    };

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, char, RebootType >
    _xsd_RebootType_type_factory_init (
      "RebootType",
      "http://docs.rackspacecloud.com/servers/api/v1.0");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace openstack
{
  namespace xml
  {
    ::std::auto_ptr< ::openstack::xml::Reboot >
    reboot (const ::std::string& u,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::Reboot > r (
        ::openstack::xml::reboot (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Reboot >
    reboot (const ::std::string& u,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Reboot > r (
        ::openstack::xml::reboot (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Reboot >
    reboot (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Reboot > r (
        ::openstack::xml::reboot (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Reboot >
    reboot (::std::istream& is,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::reboot (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Reboot >
    reboot (::std::istream& is,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::reboot (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Reboot >
    reboot (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::reboot (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Reboot >
    reboot (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::reboot (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Reboot >
    reboot (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::reboot (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Reboot >
    reboot (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::reboot (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Reboot >
    reboot (::xercesc::InputSource& i,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::Reboot > r (
        ::openstack::xml::reboot (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Reboot >
    reboot (::xercesc::InputSource& i,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Reboot > r (
        ::openstack::xml::reboot (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Reboot >
    reboot (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Reboot > r (
        ::openstack::xml::reboot (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Reboot >
    reboot (const ::xercesc::DOMDocument& d,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::Reboot > r (
          ::openstack::xml::reboot (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "reboot",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::Reboot >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::Reboot > r (
          dynamic_cast< ::openstack::xml::Reboot* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "reboot",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::Reboot >
    reboot (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "reboot",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::Reboot >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::Reboot > r (
          dynamic_cast< ::openstack::xml::Reboot* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "reboot",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::Rebuild >
    rebuild (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::Rebuild > r (
        ::openstack::xml::rebuild (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Rebuild >
    rebuild (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Rebuild > r (
        ::openstack::xml::rebuild (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Rebuild >
    rebuild (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Rebuild > r (
        ::openstack::xml::rebuild (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Rebuild >
    rebuild (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::rebuild (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Rebuild >
    rebuild (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::rebuild (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Rebuild >
    rebuild (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::rebuild (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Rebuild >
    rebuild (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::rebuild (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Rebuild >
    rebuild (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::rebuild (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Rebuild >
    rebuild (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::rebuild (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Rebuild >
    rebuild (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::Rebuild > r (
        ::openstack::xml::rebuild (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Rebuild >
    rebuild (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Rebuild > r (
        ::openstack::xml::rebuild (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Rebuild >
    rebuild (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Rebuild > r (
        ::openstack::xml::rebuild (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Rebuild >
    rebuild (const ::xercesc::DOMDocument& d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::Rebuild > r (
          ::openstack::xml::rebuild (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "rebuild",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::Rebuild >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::Rebuild > r (
          dynamic_cast< ::openstack::xml::Rebuild* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "rebuild",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::Rebuild >
    rebuild (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "rebuild",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::Rebuild >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::Rebuild > r (
          dynamic_cast< ::openstack::xml::Rebuild* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "rebuild",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::Resize >
    resize (const ::std::string& u,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::Resize > r (
        ::openstack::xml::resize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Resize >
    resize (const ::std::string& u,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Resize > r (
        ::openstack::xml::resize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Resize >
    resize (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Resize > r (
        ::openstack::xml::resize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Resize >
    resize (::std::istream& is,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::resize (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Resize >
    resize (::std::istream& is,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::resize (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Resize >
    resize (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::resize (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Resize >
    resize (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::resize (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Resize >
    resize (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::resize (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Resize >
    resize (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::resize (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::Resize >
    resize (::xercesc::InputSource& i,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::Resize > r (
        ::openstack::xml::resize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Resize >
    resize (::xercesc::InputSource& i,
            ::xml_schema::ErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Resize > r (
        ::openstack::xml::resize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Resize >
    resize (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::Resize > r (
        ::openstack::xml::resize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::Resize >
    resize (const ::xercesc::DOMDocument& d,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::Resize > r (
          ::openstack::xml::resize (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "resize",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::Resize >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::Resize > r (
          dynamic_cast< ::openstack::xml::Resize* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "resize",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::Resize >
    resize (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::Flags f,
            const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "resize",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::Resize >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::Resize > r (
          dynamic_cast< ::openstack::xml::Resize* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "resize",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::ConfirmResize >
    confirmResize (const ::std::string& u,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::ConfirmResize > r (
        ::openstack::xml::confirmResize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ConfirmResize >
    confirmResize (const ::std::string& u,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ConfirmResize > r (
        ::openstack::xml::confirmResize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ConfirmResize >
    confirmResize (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ConfirmResize > r (
        ::openstack::xml::confirmResize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ConfirmResize >
    confirmResize (::std::istream& is,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::confirmResize (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ConfirmResize >
    confirmResize (::std::istream& is,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::confirmResize (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ConfirmResize >
    confirmResize (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::confirmResize (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ConfirmResize >
    confirmResize (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::confirmResize (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ConfirmResize >
    confirmResize (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::confirmResize (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ConfirmResize >
    confirmResize (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::confirmResize (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::ConfirmResize >
    confirmResize (::xercesc::InputSource& i,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::ConfirmResize > r (
        ::openstack::xml::confirmResize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ConfirmResize >
    confirmResize (::xercesc::InputSource& i,
                   ::xml_schema::ErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ConfirmResize > r (
        ::openstack::xml::confirmResize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ConfirmResize >
    confirmResize (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::ConfirmResize > r (
        ::openstack::xml::confirmResize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::ConfirmResize >
    confirmResize (const ::xercesc::DOMDocument& d,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::ConfirmResize > r (
          ::openstack::xml::confirmResize (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "confirmResize",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::ConfirmResize >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::ConfirmResize > r (
          dynamic_cast< ::openstack::xml::ConfirmResize* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "confirmResize",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::ConfirmResize >
    confirmResize (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::Flags f,
                   const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "confirmResize",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::ConfirmResize >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::ConfirmResize > r (
          dynamic_cast< ::openstack::xml::ConfirmResize* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "confirmResize",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::RevertResize >
    revertResize (const ::std::string& u,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::RevertResize > r (
        ::openstack::xml::revertResize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::RevertResize >
    revertResize (const ::std::string& u,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::RevertResize > r (
        ::openstack::xml::revertResize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::RevertResize >
    revertResize (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::RevertResize > r (
        ::openstack::xml::revertResize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::RevertResize >
    revertResize (::std::istream& is,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::revertResize (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::RevertResize >
    revertResize (::std::istream& is,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::revertResize (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::RevertResize >
    revertResize (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::openstack::xml::revertResize (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::RevertResize >
    revertResize (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::revertResize (isrc, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::RevertResize >
    revertResize (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::revertResize (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::RevertResize >
    revertResize (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::openstack::xml::revertResize (isrc, h, f, p);
    }

    ::std::auto_ptr< ::openstack::xml::RevertResize >
    revertResize (::xercesc::InputSource& i,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      ::std::auto_ptr< ::openstack::xml::RevertResize > r (
        ::openstack::xml::revertResize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::RevertResize >
    revertResize (::xercesc::InputSource& i,
                  ::xml_schema::ErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::RevertResize > r (
        ::openstack::xml::revertResize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::RevertResize >
    revertResize (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      ::std::auto_ptr< ::openstack::xml::RevertResize > r (
        ::openstack::xml::revertResize (
          d, f | ::xml_schema::Flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::openstack::xml::RevertResize >
    revertResize (const ::xercesc::DOMDocument& d,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::openstack::xml::RevertResize > r (
          ::openstack::xml::revertResize (
            c, f | ::xml_schema::Flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "revertResize",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::RevertResize >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::openstack::xml::RevertResize > r (
          dynamic_cast< ::openstack::xml::RevertResize* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "revertResize",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }

    ::std::auto_ptr< ::openstack::xml::RevertResize >
    revertResize (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::Flags f,
                  const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::treeNodeKey,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< char >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, char > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          "revertResize",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          &::xsd::cxx::tree::factory_impl< ::openstack::xml::RevertResize >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::openstack::xml::RevertResize > r (
          dynamic_cast< ::openstack::xml::RevertResize* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< char > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "revertResize",
        "http://docs.rackspacecloud.com/servers/api/v1.0");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, char >
  type_serializer_plate_init;
}

namespace openstack
{
  namespace xml
  {
    void
    reboot (::std::ostream& o,
            const ::openstack::xml::Reboot& s,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::reboot (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    reboot (::std::ostream& o,
            const ::openstack::xml::Reboot& s,
            ::xml_schema::ErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::reboot (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    reboot (::std::ostream& o,
            const ::openstack::xml::Reboot& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::reboot (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    reboot (::xercesc::XMLFormatTarget& t,
            const ::openstack::xml::Reboot& s,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::reboot (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    reboot (::xercesc::XMLFormatTarget& t,
            const ::openstack::xml::Reboot& s,
            ::xml_schema::ErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::reboot (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    reboot (::xercesc::XMLFormatTarget& t,
            const ::openstack::xml::Reboot& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::reboot (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    reboot (::xercesc::DOMDocument& d,
            const ::openstack::xml::Reboot& s,
            ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::Reboot) == typeid (s))
      {
        if (n.name () == "reboot" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "reboot",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "reboot",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    reboot (const ::openstack::xml::Reboot& s,
            const ::xml_schema::NamespaceInfomap& m,
            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::Reboot) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "reboot",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "reboot",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::reboot (*d, s, f);
      return d;
    }

    void
    rebuild (::std::ostream& o,
             const ::openstack::xml::Rebuild& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::rebuild (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    rebuild (::std::ostream& o,
             const ::openstack::xml::Rebuild& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::rebuild (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    rebuild (::std::ostream& o,
             const ::openstack::xml::Rebuild& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::rebuild (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    rebuild (::xercesc::XMLFormatTarget& t,
             const ::openstack::xml::Rebuild& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::rebuild (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    rebuild (::xercesc::XMLFormatTarget& t,
             const ::openstack::xml::Rebuild& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::rebuild (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    rebuild (::xercesc::XMLFormatTarget& t,
             const ::openstack::xml::Rebuild& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::rebuild (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    rebuild (::xercesc::DOMDocument& d,
             const ::openstack::xml::Rebuild& s,
             ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::Rebuild) == typeid (s))
      {
        if (n.name () == "rebuild" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "rebuild",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "rebuild",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    rebuild (const ::openstack::xml::Rebuild& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::Rebuild) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "rebuild",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "rebuild",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::rebuild (*d, s, f);
      return d;
    }

    void
    resize (::std::ostream& o,
            const ::openstack::xml::Resize& s,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::resize (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    resize (::std::ostream& o,
            const ::openstack::xml::Resize& s,
            ::xml_schema::ErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::resize (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    resize (::std::ostream& o,
            const ::openstack::xml::Resize& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::resize (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    resize (::xercesc::XMLFormatTarget& t,
            const ::openstack::xml::Resize& s,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::resize (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    resize (::xercesc::XMLFormatTarget& t,
            const ::openstack::xml::Resize& s,
            ::xml_schema::ErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::resize (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    resize (::xercesc::XMLFormatTarget& t,
            const ::openstack::xml::Resize& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::NamespaceInfomap& m,
            const ::std::string& e,
            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::resize (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    resize (::xercesc::DOMDocument& d,
            const ::openstack::xml::Resize& s,
            ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::Resize) == typeid (s))
      {
        if (n.name () == "resize" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "resize",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "resize",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    resize (const ::openstack::xml::Resize& s,
            const ::xml_schema::NamespaceInfomap& m,
            ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::Resize) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "resize",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "resize",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::resize (*d, s, f);
      return d;
    }

    void
    confirmResize (::std::ostream& o,
                   const ::openstack::xml::ConfirmResize& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::confirmResize (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    confirmResize (::std::ostream& o,
                   const ::openstack::xml::ConfirmResize& s,
                   ::xml_schema::ErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::confirmResize (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    confirmResize (::std::ostream& o,
                   const ::openstack::xml::ConfirmResize& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::confirmResize (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    confirmResize (::xercesc::XMLFormatTarget& t,
                   const ::openstack::xml::ConfirmResize& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::confirmResize (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    confirmResize (::xercesc::XMLFormatTarget& t,
                   const ::openstack::xml::ConfirmResize& s,
                   ::xml_schema::ErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::confirmResize (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    confirmResize (::xercesc::XMLFormatTarget& t,
                   const ::openstack::xml::ConfirmResize& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::NamespaceInfomap& m,
                   const ::std::string& e,
                   ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::confirmResize (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    confirmResize (::xercesc::DOMDocument& d,
                   const ::openstack::xml::ConfirmResize& s,
                   ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::ConfirmResize) == typeid (s))
      {
        if (n.name () == "confirmResize" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "confirmResize",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "confirmResize",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    confirmResize (const ::openstack::xml::ConfirmResize& s,
                   const ::xml_schema::NamespaceInfomap& m,
                   ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::ConfirmResize) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "confirmResize",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "confirmResize",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::confirmResize (*d, s, f);
      return d;
    }

    void
    revertResize (::std::ostream& o,
                  const ::openstack::xml::RevertResize& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::revertResize (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    revertResize (::std::ostream& o,
                  const ::openstack::xml::RevertResize& s,
                  ::xml_schema::ErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::revertResize (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    revertResize (::std::ostream& o,
                  const ::openstack::xml::RevertResize& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::revertResize (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    revertResize (::xercesc::XMLFormatTarget& t,
                  const ::openstack::xml::RevertResize& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::revertResize (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    revertResize (::xercesc::XMLFormatTarget& t,
                  const ::openstack::xml::RevertResize& s,
                  ::xml_schema::ErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::revertResize (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    revertResize (::xercesc::XMLFormatTarget& t,
                  const ::openstack::xml::RevertResize& s,
                  ::xercesc::DOMErrorHandler& h,
                  const ::xml_schema::NamespaceInfomap& m,
                  const ::std::string& e,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::openstack::xml::revertResize (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    revertResize (::xercesc::DOMDocument& d,
                  const ::openstack::xml::RevertResize& s,
                  ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (typeid (::openstack::xml::RevertResize) == typeid (s))
      {
        if (n.name () == "revertResize" &&
            n.namespace_ () == "http://docs.rackspacecloud.com/servers/api/v1.0")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < char > (
            n.name (),
            n.namespace_ (),
            "revertResize",
            "http://docs.rackspacecloud.com/servers/api/v1.0");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        tsm.serialize (
          "revertResize",
          "http://docs.rackspacecloud.com/servers/api/v1.0",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    revertResize (const ::openstack::xml::RevertResize& s,
                  const ::xml_schema::NamespaceInfomap& m,
                  ::xml_schema::Flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::openstack::xml::RevertResize) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< char > (
            "revertResize",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< char >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, char > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            "revertResize",
            "http://docs.rackspacecloud.com/servers/api/v1.0",
            m, s, f));
        d = r;
      }

      ::openstack::xml::revertResize (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const Action& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr&, const Action&)
    {
    }

    void
    operator<< (::xml_schema::ListStream&,
                const Action&)
    {
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Action >
    _xsd_Action_type_serializer_init (
      "Action",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const Reboot& i)
    {
      e << static_cast< const ::openstack::xml::Action& > (i);

      // type
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "type",
            e));

        a << i.type ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Reboot >
    _xsd_Reboot_type_serializer_init (
      "Reboot",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const Rebuild& i)
    {
      e << static_cast< const ::openstack::xml::Action& > (i);

      // imageId
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "imageId",
            e));

        a << i.imageId ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Rebuild >
    _xsd_Rebuild_type_serializer_init (
      "Rebuild",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const Resize& i)
    {
      e << static_cast< const ::openstack::xml::Action& > (i);

      // flavorId
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            "flavorId",
            e));

        a << i.flavorId ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, Resize >
    _xsd_Resize_type_serializer_init (
      "Resize",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const ConfirmResize& i)
    {
      e << static_cast< const ::openstack::xml::Action& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const ConfirmResize& i)
    {
      a << static_cast< const ::openstack::xml::Action& > (i);
    }

    void
    operator<< (::xml_schema::ListStream& l,
                const ConfirmResize& i)
    {
      l << static_cast< const ::openstack::xml::Action& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, ConfirmResize >
    _xsd_ConfirmResize_type_serializer_init (
      "ConfirmResize",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const RevertResize& i)
    {
      e << static_cast< const ::openstack::xml::Action& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const RevertResize& i)
    {
      a << static_cast< const ::openstack::xml::Action& > (i);
    }

    void
    operator<< (::xml_schema::ListStream& l,
                const RevertResize& i)
    {
      l << static_cast< const ::openstack::xml::Action& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RevertResize >
    _xsd_RevertResize_type_serializer_init (
      "RevertResize",
      "http://docs.rackspacecloud.com/servers/api/v1.0");


    void
    operator<< (::xercesc::DOMElement& e, const RebootType& i)
    {
      e << static_cast< const ::xml_schema::String& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const RebootType& i)
    {
      a << static_cast< const ::xml_schema::String& > (i);
    }

    void
    operator<< (::xml_schema::ListStream& l,
                const RebootType& i)
    {
      l << static_cast< const ::xml_schema::String& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, char, RebootType >
    _xsd_RebootType_type_serializer_init (
      "RebootType",
      "http://docs.rackspacecloud.com/servers/api/v1.0");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

