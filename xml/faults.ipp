// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XSDS_FAULTS_IPP
#define XSDS_FAULTS_IPP

// Begin prologue.
//
//
// End prologue.

namespace openstack
{
  namespace xml
  {
    // CloudServersAPIFault
    // 

    inline
    const CloudServersAPIFault::MessageType& CloudServersAPIFault::
    message () const
    {
      return this->message_.get ();
    }

    inline
    CloudServersAPIFault::MessageType& CloudServersAPIFault::
    message ()
    {
      return this->message_.get ();
    }

    inline
    void CloudServersAPIFault::
    message (const MessageType& x)
    {
      this->message_.set (x);
    }

    inline
    void CloudServersAPIFault::
    message (::std::auto_ptr< MessageType > x)
    {
      this->message_.set (x);
    }

    inline
    const CloudServersAPIFault::DetailsOptional& CloudServersAPIFault::
    details () const
    {
      return this->details_;
    }

    inline
    CloudServersAPIFault::DetailsOptional& CloudServersAPIFault::
    details ()
    {
      return this->details_;
    }

    inline
    void CloudServersAPIFault::
    details (const DetailsType& x)
    {
      this->details_.set (x);
    }

    inline
    void CloudServersAPIFault::
    details (const DetailsOptional& x)
    {
      this->details_ = x;
    }

    inline
    void CloudServersAPIFault::
    details (::std::auto_ptr< DetailsType > x)
    {
      this->details_.set (x);
    }

    inline
    const CloudServersAPIFault::CodeType& CloudServersAPIFault::
    code () const
    {
      return this->code_.get ();
    }

    inline
    CloudServersAPIFault::CodeType& CloudServersAPIFault::
    code ()
    {
      return this->code_.get ();
    }

    inline
    void CloudServersAPIFault::
    code (const CodeType& x)
    {
      this->code_.set (x);
    }


    // ItemNotFoundAPIFault
    // 


    // BuildInProgressAPIFault
    // 


    // ServerCapacityUnavailableAPIFault
    // 


    // BackupOrResizeInProgressAPIFault
    // 


    // ResizeNotAllowedAPIFault
    // 


    // ServiceUnavailableAPIFault
    // 


    // UnauthorizedAPIFault
    // 


    // OverLimitAPIFault
    // 

    inline
    const OverLimitAPIFault::RetryAfterOptional& OverLimitAPIFault::
    retryAfter () const
    {
      return this->retryAfter_;
    }

    inline
    OverLimitAPIFault::RetryAfterOptional& OverLimitAPIFault::
    retryAfter ()
    {
      return this->retryAfter_;
    }

    inline
    void OverLimitAPIFault::
    retryAfter (const RetryAfterType& x)
    {
      this->retryAfter_.set (x);
    }

    inline
    void OverLimitAPIFault::
    retryAfter (const RetryAfterOptional& x)
    {
      this->retryAfter_ = x;
    }

    inline
    void OverLimitAPIFault::
    retryAfter (::std::auto_ptr< RetryAfterType > x)
    {
      this->retryAfter_.set (x);
    }


    // BadRequestAPIFault
    // 


    // BadMediaTypeAPIFault
    // 


    // BadMethodAPIFault
    // 


    // NotImplementedAPIFault
    // 
  }
}

// Begin epilogue.
//
//
// End epilogue.

#endif // XSDS_FAULTS_IPP
